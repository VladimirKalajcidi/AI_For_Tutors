from aiogram import Router, types
from aiogram.filters import Text, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
import json
from sqlalchemy import select
from aiogram.filters import StateFilter
import database.crud as crud
from keyboards.students import students_list_keyboard, student_actions_keyboard
from states.student_states import StudentStates
from keyboards.students import edit_student_keyboard, yandex_materials_keyboard
from database.db import async_session
from database.models import Student
from aiogram import F, Bot
from io import BytesIO
from services import storage_service
from keyboards.students import subject_keyboard, direction_keyboard

router = Router()

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
@router.message(Command("add_student"))
async def add_student_start(message: types.Message, state: FSMContext):
    await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —É—á–µ–Ω–∏–∫–∞:", reply_markup=subject_keyboard())
    await state.set_state(StudentStates.enter_subject)

@router.message(StudentStates.enter_subject)
async def process_subject(message: Message, state: FSMContext):
    await state.update_data(subject=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=direction_keyboard())
    await state.set_state(StudentStates.enter_direction)

@router.message(StudentStates.enter_direction)
async def process_direction(message: Message, state: FSMContext):
    await state.update_data(direction=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentStates.enter_name)

@router.message(StudentStates.enter_name)
async def process_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentStates.enter_surname)

@router.message(StudentStates.enter_surname)
async def process_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentStates.enter_class)

@router.message(StudentStates.enter_class)
async def process_grade(message: Message, state: FSMContext):
    await state.update_data(grade=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentStates.enter_phone)

@router.message(StudentStates.enter_phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentStates.enter_parent_phone)

@router.message(StudentStates.enter_parent_phone)
async def process_parent_phone(message: Message, state: FSMContext):
    await state.update_data(parent_phone=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏) –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç:")
    await state.set_state(StudentStates.enter_profile)

@router.message(StudentStates.enter_profile)
async def process_profile(message: Message, state: FSMContext):
    await state.update_data(profile=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –æ–±—É—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentStates.enter_goal)

@router.message(StudentStates.enter_goal)
async def process_goal(message: Message, state: FSMContext):
    await state.update_data(goal=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentStates.enter_level)

from database.db import async_session

@router.message(StudentStates.enter_level)
async def process_level(message: Message, state: FSMContext, **data):
    import json
    from database.db import async_session
    from keyboards.main_menu import main_menu_kb
    from services.gpt_service import generate_diagnostic_test
    from services.storage_service import generate_tex_pdf
    from aiogram.types import FSInputFile
    import database.crud as crud
    from database.models import Student
    from keyboards.students import students_list_keyboard

    teacher = data.get("teacher")
    level = message.text.strip()
    student_data = await state.get_data()

    # –°–æ–±–∏—Ä–∞–µ–º other_inf –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    other_info = json.dumps({
        "profile": student_data.get("profile"),
        "goal": student_data.get("goal"),
        "level": level
    })

    async with async_session() as session:
        new_student = await crud.create_student(
            session=session,
            teacher_id=teacher.teacher_id,
            name=student_data.get("first_name"),
            surname=student_data.get("last_name"),
            class_=student_data.get("grade"),
            subject=student_data.get("subject"),
            direction=student_data.get("direction"),
            phone=student_data.get("phone"),
            parent_phone=student_data.get("parent_phone"),
            other_inf=other_info
        )

    await state.clear()
    # –û–ø–æ–≤–µ—â–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        f"‚úÖ –£—á–µ–Ω–∏–∫ {new_student.name} {new_student.surname} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        "–°–µ–π—á–∞—Å –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶",
        reply_markup=main_menu_kb(teacher.language)
    )

    # 1) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TeX-–∫–æ–¥–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞
    diag_tex = await generate_diagnostic_test(
        new_student,
        model=teacher.model,
        language=teacher.language or "ru"
    )

    # 2) –ö–æ–º–ø–∏–ª—è—Ü–∏—è TeX ‚Üí PDF
    #    –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à storage_service.generate_tex_pdf
    file_name = f"DiagTest_{new_student.name}_{new_student.surname}"
    from services.storage_service import generate_tex_pdf

    # ‚Ä¶
    diag_pdf = generate_tex_pdf(diag_tex, f"Diagnostic_{new_student.name}_{new_student.surname}")
    await message.answer_document(
        document=types.FSInputFile(diag_pdf),
        caption="üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç"
    )


    # 4) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    if teacher.yandex_token:
        from io import BytesIO
        buf = BytesIO(open(diag_pdf, "rb").read())
        buf.seek(0)
        await storage_service.upload_bytes_to_yandex(
            file_obj=buf,
            teacher=teacher,
            student=new_student,
            category="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            filename_base="Diagnostic"
        )

    # 5) –î–æ–±–∞–≤–ª—è–µ–º TeX-–∫–æ–¥ —Ç–µ—Å—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç —É—á–µ–Ω–∏–∫–∞
    await crud.append_to_report(new_student.students_id, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç", diag_tex)

    # 6) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
    students = await crud.list_students(teacher)
    await message.answer(
        "üìã –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:",
        reply_markup=students_list_keyboard(students)
    )



@router.message(Text(text=["üë®‚Äçüéì –£—á–µ–Ω–∏–∫–∏", "üë®‚Äçüéì Students"]))
async def menu_students(message: Message, state: FSMContext, **data):
    teacher = data.get("teacher")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    from datetime import datetime
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires) if teacher.subscription_expires else None
    except Exception:
        exp = None
    if not exp or exp < datetime.now():
        await message.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å —É—á–µ–Ω–∏–∫–∞–º–∏.")
        return
    students = await crud.list_students(teacher)
    if not students:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_student, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞.")
    else:
        await message.answer("üë®‚Äçüéì –í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:", reply_markup=students_list_keyboard(students))




@router.message(Command("add_student"))
async def cmd_add_student(message: Message, state: FSMContext):
    await add_student_start(message, state)

@router.callback_query(Text("add_student"))
async def callback_add_student(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await add_student_start(callback.message, state)


@router.callback_query(Text(startswith="student:"))
async def callback_view_student(callback: CallbackQuery, teacher, **data):
    # –ü–æ–ª—É—á–∞–µ–º ID –∏ —Å–∞–º –æ–±—ä–µ–∫—Ç —É—á–µ–Ω–∏–∫–∞
    parts = callback.data.split(":")
    student_id = int(parts[1])
    student = await crud.get_student(teacher, student_id)
    if not student:
        return await callback.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ JSON
    try:
        extra = json.loads(student.other_inf or "{}")
        goal = extra.get("goal", "‚Äî")
        level = extra.get("level", "‚Äî")
    except Exception:
        goal = level = "‚Äî"

    # –¢–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤ student.report_student
    report_text = student.report_student.strip() if student.report_student else "‚Äî"

    text = (
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üéØ –¶–µ–ª—å: {goal}\n"
        f"üìà –û—Ç—á—ë—Ç:\n{report_text}"
    )

    await callback.message.edit_text(
        text,
        reply_markup=student_actions_keyboard(student.students_id)
    )


@router.callback_query(Text(startswith="back_students"))
async def back_to_students(callback: CallbackQuery, **data):
    teacher = data.get("teacher")
    await callback.answer()
    students = await crud.list_students(teacher)
    if not students:
        await callback.message.edit_text("No students yet.")
    else:
        await callback.message.edit_text("Your students:", reply_markup=students_list_keyboard(students))

@router.callback_query(Text("check_solution"))
async def callback_start_check(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("üñäÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    await state.set_state(StudentStates.awaiting_solution)

from aiogram.filters import StateFilter
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from states.student_states import StudentStates
import database.crud as crud
from services.gpt_service import check_solution  # –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
from keyboards.students import students_list_keyboard

@router.message(StateFilter(StudentStates.awaiting_solution_text))
async def process_solution_text(
    message: Message,
    state: FSMContext,
    teacher  # <- –≤–æ—Ç —Å—é–¥–∞ Aiogram –ø–æ–¥—Å—Ç–∞–≤–∏—Ç teacher –∏–∑ middleware
):
    # 1) –¥–æ—Å—Ç–∞—ë–º –∏–∑ state, –∫–∞–∫–æ–π —Å—Ç—É–¥–µ–Ω—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    data = await state.get_data()
    student_id = data.get("student_id")
    if not student_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.")
        await state.clear()
        return

    # 2) –¥–æ—Å—Ç–∞—ë–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –ë–î
    student = await crud.get_student(teacher, student_id)
    if not student:
        await message.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–∞—à.")
        await state.clear()
        return

    # 3) –ø–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
    solution_text = message.text

    # 4) —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ state –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º FSM –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–∞
    await state.update_data(solution_text=solution_text)
    await state.set_state(StudentStates.awaiting_expected_solution)

    await message.answer("üìã –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏.")


@router.message(StateFilter(StudentStates.awaiting_expected_solution))
async def process_expected_solution(
    message: Message,
    state: FSMContext,
    teacher
):
    data = await state.get_data()
    student_id      = data.get("student_id")
    solution_text   = data.get("solution_text")
    expected_answer = message.text

    student = await crud.get_student(teacher, student_id)

    # 5) –ü–µ—Ä–µ–¥–∞—ë–º –≤—Å—ë –≤ GPT
    result = await check_solution(
        student=student,
        model=teacher.model,
        solution=solution_text,
        expected=expected_answer
    )

    await message.answer(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞:\n{result}")

    # 6) —Å–±—Ä–∞—Å—ã–≤–∞–µ–º state (–∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    await state.clear()
    students = await crud.list_students(teacher)
    await message.answer("üë®‚Äçüéì –í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:", reply_markup=students_list_keyboard(students))



@router.callback_query(Text(startswith="upload:"))
async def callback_upload_file(callback: CallbackQuery, state: FSMContext, **data):
    teacher = data.get("teacher")
    students_id = int(callback.data.split(":")[1])
    if not teacher.yandex_token:
        await callback.answer()
        await callback.message.answer("‚ö†Ô∏è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    await callback.answer()
    await state.set_state(StudentStates.waiting_for_file)
    await state.update_data(students_id=students_id)
    await callback.message.edit_text("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç) –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞.")



@router.message(StudentStates.waiting_for_file)
async def process_file_upload(message: Message, state: FSMContext, bot: Bot, **data):
    teacher = data.get("teacher")
    if not message.document:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª-–¥–æ–∫—É–º–µ–Ω—Ç.")
        return
    state_data = await state.get_data()
    students_id = state_data.get("students_id")
    file_name = message.document.file_name or "file"
    file = await bot.get_file(message.document.file_id)
    buffer = BytesIO()
    await bot.download_file(file.file_path, buffer)
    buffer.seek(0)

    from sqlalchemy import select

    async with async_session() as session:
        result = await session.execute(select(Student).where(Student.students_id == students_id))
        student = result.scalar_one_or_none()
    if not student:
        await message.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    success = await storage_service.upload_bytes_to_yandex(
        file_obj=buffer,
        teacher=teacher,
        student=student,
        category="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
        filename_base=file_name.rsplit(".", 1)[0]
    )
    if success:
        await message.answer(f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã).")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø.–î–∏—Å–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
    await state.clear()






@router.callback_query(Text(startswith="edit_student:"))
async def callback_edit_student(callback: CallbackQuery):
    students_id = int(callback.data.split(":")[1])
    await callback.answer()
    await callback.message.edit_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=edit_student_keyboard(students_id)
    )

@router.callback_query(Text(startswith="edit_field:"))
async def callback_edit_field(callback: CallbackQuery, state: FSMContext):
    _, students_id, field = callback.data.split(":")
    await state.set_state(StudentStates.editing_field)  # <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ
    await state.update_data(students_id=int(students_id), field=field)
    await callback.answer()
    await callback.message.edit_text(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: *{field}*", parse_mode="Markdown")


@router.message(StateFilter(StudentStates.editing_field))
async def process_student_field_edit(message: Message, state: FSMContext, **data):

    state_data = await state.get_data()
    students_id = state_data.get("students_id")
    field = state_data.get("field")
    teacher = data.get("teacher")

    if not students_id or not field:
        return  # –Ω–µ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    new_value = message.text.strip()
    await crud.update_student_field(teacher, students_id, field, new_value)
    await state.clear()
    await message.answer(f"‚úÖ –ü–æ–ª–µ *{field}* –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", parse_mode="Markdown")

    student = await crud.get_student(teacher, students_id)
    other_inf = student.other_inf or "{}"
    try:
        info = json.loads(other_inf)
    except json.JSONDecodeError:
        info_text = other_inf    # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ JSON, –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else:
        parts = []
        if info.get("goal"):
            parts.append(f"üéØ –¶–µ–ª—å: {info['goal']}")
        if info.get("level"):
            parts.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: {info['level']}")
        if info.get("profile"):
            parts.append(f"üìù –ü—Ä–æ—Ñ–∏–ª—å: {info['profile']}")
        info_text = "\n".join(parts) or "‚Äî"

    await message.answer(
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student.subject or '‚Äî'}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info_text}",
        reply_markup=student_actions_keyboard(student.students_id)
    )


@router.callback_query(Text(startswith="delete_student:"))
async def callback_delete_student(callback: CallbackQuery):
    students_id = int(callback.data.split(":")[1])
    await callback.answer()
    await callback.message.edit_text(
        "‚ùóÔ∏è–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞?",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{students_id}")],
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"student:{students_id}")]
        ])
    )

@router.callback_query(Text(startswith="confirm_delete:"))
async def callback_confirm_delete(callback: CallbackQuery, **data):
    teacher = data.get("teacher")
    students_id = int(callback.data.split(":")[1])
    await crud.delete_student(teacher, students_id)
    await callback.answer("üóë –£—á–µ–Ω–∏–∫ —É–¥–∞–ª—ë–Ω")

    students = await crud.list_students(teacher)
    if students:
        await callback.message.edit_text("üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω:", reply_markup=students_list_keyboard(students))
    else:
        await callback.message.edit_text("–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")


@router.callback_query(Text(startswith="yadisk:"))
async def callback_yadisk_menu(callback: CallbackQuery):
    students_id = int(callback.data.split(":")[1])
    await callback.message.edit_text(
        "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:",
        reply_markup=yandex_materials_keyboard(students_id)
    )


@router.callback_query(Text(startswith="upload_material:"))
async def callback_select_material_type(callback: CallbackQuery, state: FSMContext):
    _, students_id, material_type = callback.data.split(":")
    await state.set_state(StudentStates.waiting_for_file)
    await state.update_data(students_id=int(students_id), material_type=material_type)
    await callback.message.edit_text("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")

@router.message(StudentStates.waiting_for_file)
async def handle_file_upload(message: Message, state: FSMContext, teacher):
    data = await state.get_data()
    students_id = data.get("students_id")
    material_type = data.get("material_type")
    
    if not teacher.yandex_token:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    if not message.document:
        await message.answer("‚ö†Ô∏è –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç!")
        return

    from aiogram import Bot
    import io
    from database.db import AsyncSessionLocal
    from database.models import Student

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    bot: Bot = message.bot
    file = await bot.get_file(message.document.file_id)
    buffer = io.BytesIO()
    await bot.download_file(file.file_path, destination=buffer)
    buffer.seek(0)

    from sqlalchemy import select


    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —É—á–µ–Ω–∏–∫–∞
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Student).where(Student.students_id == students_id))
        student = result.scalar_one_or_none()

    if not student:
        await message.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ù–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ –ø–æ —Ç–∏–ø—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    folder_map = {
        "homework": "–î–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã",
        "assignment": "–ö–ª–∞—Å—Å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
        "theory": "–¢–µ–æ—Ä–∏—è",
        "plan": "–ü–ª–∞–Ω—ã",
        "report": "–û—Ç—á—ë—Ç—ã",
        "checked": "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ"
    }
    category = folder_map.get(material_type, "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    filename_base = message.document.file_name.rsplit(".", 1)[0]
    success = await storage_service.upload_bytes_to_yandex(
        file_obj=buffer,
        teacher=teacher,
        student=student,
        category=category,
        filename_base=filename_base
    )

    await state.clear()

    if success:
        await message.answer(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–ø–∫—É `{category}` –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.")


...

@router.callback_query(Text(startswith="edit_days:"))
async def callback_edit_days(callback: CallbackQuery, state: FSMContext):
    students_id = int(callback.data.split(":")[1])
    await state.set_state(StudentStates.editing_days)
    await state.update_data(students_id=students_id, selected_days=[])

    buttons = [
        [types.InlineKeyboardButton(text=day, callback_data=f"toggle_day:{day}") for day in ["Mon", "Tue", "Wed"]],
        [types.InlineKeyboardButton(text=day, callback_data=f"toggle_day:{day}") for day in ["Thu", "Fri", "Sat"]],
        [types.InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_days"),
         types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"student:{students_id}")]
    ]
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –∑–∞–Ω—è—Ç–∏–π (–Ω–∞–∂–º–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã):",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
    )

@router.callback_query(Text(startswith="toggle_day:"))
async def toggle_day_selection(callback: CallbackQuery, state: FSMContext):
    day = callback.data.split(":")[1]
    await state.update_data(current_day=day)
    await callback.message.answer(f"üïì –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM –¥–ª—è {day}:")
    await state.set_state(StudentStates.enter_day_time)


@router.callback_query(Text("save_days"))
async def save_schedule_days(callback: CallbackQuery, state: FSMContext, **data):
    from datetime import time
    teacher = data.get("teacher")
    state_data = await state.get_data()
    students_id = state_data.get("students_id")
    schedule = state_data.get("schedule_data", {})

    for day, time_range in schedule.items():
        start_h, start_m = map(int, time_range["start"].split(":"))
        end_h, end_m = map(int, time_range["end"].split(":"))
        await crud.set_student_schedule_template(
            teacher=teacher,
            student_id=students_id,
            days=[day],
            start_time=time(start_h, start_m),
            end_time=time(end_h, end_m)
        )

    await state.clear()
    await callback.message.answer("‚úÖ –î–Ω–∏ –∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=student_actions_keyboard(students_id))



@router.message(StudentStates.set_schedule_time)
async def process_schedule_time(message: Message, state: FSMContext, **data):
    import json
    from database import crud
    from datetime import time

    teacher = data.get("teacher")
    input_time = message.text.strip()
    try:
        start_str, end_str = input_time.split("-")
        start_h, start_m = map(int, start_str.split(":"))
        end_h, end_m = map(int, end_str.split(":"))
        start_time = time(start_h, start_m)
        end_time = time(end_h, end_m)
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ HH:MM-HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:00-17:30).")
        return

    state_data = await state.get_data()
    students_id = state_data.get("students_id")
    days = state_data.get("selected_days", [])

    # üóìÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ë–î —á–µ—Ä–µ–∑ crud
    await crud.set_student_schedule_template(
        teacher=teacher,
        student_id=students_id,
        days=days,
        start_time=start_time,
        end_time=end_time
    )

    await message.answer("‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=student_actions_keyboard(students_id))
    await state.clear()


@router.message(StudentStates.enter_day_time)
async def process_day_time(message: Message, state: FSMContext):
    input_time = message.text.strip()
    data = await state.get_data()
    day = data.get("current_day")
    schedule = data.get("schedule_data", {})

    try:
        start_str, end_str = input_time.split("-")
        start_h, start_m = map(int, start_str.split(":"))
        end_h, end_m = map(int, end_str.split(":"))
        schedule[day] = {"start": f"{start_h:02}:{start_m:02}", "end": f"{end_h:02}:{end_m:02}"}
        await state.update_data(schedule_data=schedule)
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 16:00-17:30")
        return

    await message.answer("‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –¥–µ–Ω—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.")
    await state.set_state(StudentStates.editing_days)


from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from services.gpt_service import generate_report
from services.storage_service import generate_tex_pdf, upload_bytes_to_yandex
from database.db import async_session
from database.models import Student
from states.student_states import StudentStates

# 1) –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º PDF –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º ¬´–í—Å—ë –ª–∏ —Ö–æ—Ä–æ—à–æ?¬ª
@router.callback_query(Text(startswith="reports:"))
async def callback_generate_report_start(callback: CallbackQuery, teacher, state: FSMContext):
    await callback.answer()
    student_id = int(callback.data.split(":")[1])
    student = await crud.get_student(teacher, student_id)
    if not student:
        return await callback.answer("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏/–ª–∏–º–∏—Ç–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ
    from datetime import datetime
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires)
    except:
        exp = None
    if not exp or exp < datetime.now():
        return await callback.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
    if (student.monthly_gen_count or 0) >= 50:
        return await callback.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω.", show_alert=True)

    await callback.message.edit_text("üìë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ...")
    # —Å–∞–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    tex = await generate_report(
        student,
        model=teacher.model,
        language=teacher.language or "ru",
        output_format="tex",
    )
    pdf_path = generate_tex_pdf(tex, f"Report_{student.name}_{student.surname}")
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
    await state.update_data(student_id=student_id, tex=tex, pdf_path=pdf_path)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
    await callback.message.answer_document(FSInputFile(pdf_path),
                                           caption=f"üìë –û—Ç—á—ë—Ç –ø–æ {student.name}")
    # –∫–Ω–æ–ø–∫–∏ ¬´–î–∞/–ù–µ—Ç¬ª
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç", callback_data=f"reports_do:{student_id}")],
        [InlineKeyboardButton(text="‚úÖ –í—Å—ë —Ö–æ—Ä–æ—à–æ",          callback_data=f"reports_confirm:{student_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",               callback_data=f"student:{student_id}")],
    ])
    await callback.message.answer("–í—Å—ë –ª–∏ —Ö–æ—Ä–æ—à–æ –≤ –æ—Ç—á—ë—Ç–µ?", reply_markup=kb)
    await state.set_state(StudentStates.report_confirm)


# 2) –ï—Å–ª–∏ ¬´–î–∞¬ª ‚Äî —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º (–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–î–∏—Å–∫) –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ FSM
@router.callback_query(Text(startswith="reports_confirm:"))
async def callback_report_confirm(callback: CallbackQuery, teacher, state: FSMContext):
    await callback.answer("‚úÖ –û—Ç—á—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞ –Ø.–î–∏—Å–∫...")
    data = await state.get_data()
    pdf_path = data.get("pdf_path")
    student_id = data.get("student_id")
    # –∑–∞–≥—Ä—É–∂–∞–µ–º
    async with async_session() as session:
        student = await session.get(Student, student_id)
    if teacher.yandex_token and pdf_path and student:
        from io import BytesIO
        buffer = BytesIO(open(pdf_path, "rb").read())
        buffer.seek(0)
        await upload_bytes_to_yandex(
            file_obj=buffer,
            teacher=teacher,
            student=student,
            category="–û—Ç—á—ë—Ç—ã",
            filename_base="Report"
        )
        await callback.message.answer("üìÇ –û—Ç—á—ë—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø.–î–∏—Å–∫.")
    await state.clear()


# 3) –ï—Å–ª–∏ ¬´–ò—Å–ø—Ä–∞–≤–∏—Ç—å¬ª ‚Äî –ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç –∑–∞–º–µ—á–∞–Ω–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ report_feedback
@router.callback_query(Text(startswith="reports_feedback:"))
async def callback_report_feedback_request(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    student_id = int(callback.data.split(":")[1])
    await state.update_data(student_id=student_id)
    await callback.message.answer("üìù –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç—á—ë—Ç–µ:")
    await state.set_state(StudentStates.report_feedback)


# 4) –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—á–∞–Ω–∏–π ‚Äî —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –∏ —Å–Ω–æ–≤–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.message(StateFilter(StudentStates.report_feedback))
async def process_report_feedback(message: Message, state: FSMContext, teacher):
    feedback = message.text.strip()
    data = await state.get_data()
    student_id = data.get("student_id")
    student = await crud.get_student(teacher, student_id)
    if not student:
        await message.answer("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return await state.clear()

    await message.answer("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –≤–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç...")
    tex = await generate_report(
        student,
        model=teacher.model,
        language=teacher.language or "ru",
        output_format="tex",
        feedback=feedback
    )
    pdf_path = generate_tex_pdf(tex, f"Report_{student.name}_{student.surname}")
    # –æ–±–Ω–æ–≤–ª—è–µ–º state
    await state.update_data(tex=tex, pdf_path=pdf_path)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π PDF
    await message.answer_document(FSInputFile(pdf_path),
                                  caption="üìë –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç—á—ë—Ç–∞")
    # —Å–Ω–æ–≤–∞ –∫–Ω–æ–ø–∫–∏ ¬´–î–∞/–ù–µ—Ç¬ª
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚úÖ –í—Å—ë —Ö–æ—Ä–æ—à–æ", callback_data=f"reports_confirm:{student_id}")],
        [InlineKeyboardButton("‚úèÔ∏è –ï—â—ë –ø—Ä–∞–≤–∫–∏", callback_data=f"reports_feedback:{student_id}")]
    ])
    await message.answer("–í—Å—ë –ª–∏ —Ç–µ–ø–µ—Ä—å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç?", reply_markup=kb)
    await state.set_state(StudentStates.report_confirm)


    

from datetime import datetime
from io import BytesIO
from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.filters import Text
from services.storage_service import generate_tex_pdf, upload_bytes_to_yandex
from services.gpt_service import generate_study_plan
from services.report_service import append_to_text_report
from database import crud
from keyboards.students import student_actions_keyboard

@router.callback_query(Text(startswith="genplan:"))
async def callback_generate_plan(callback: CallbackQuery, teacher, **data):
    student_id = int(callback.data.split(":")[1])
    student = await crud.get_student(teacher, student_id)
    if not student:
        return await callback.answer("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires) if teacher.subscription_expires else None
    except Exception:
        exp = None
    if not exp or exp < datetime.now():
        return await callback.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    current_count = student.monthly_gen_count or 0
    if current_count >= 50:
        return await callback.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.", show_alert=True)

    await callback.answer()
    await callback.message.edit_text("‚úèÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ...")

    # 3) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TeX-–∫–æ–¥–∞ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
    tex_code = await generate_study_plan(
        student,
        model=teacher.model,
        language=teacher.language or "ru",
        output_format="tex"
    )

    # 4) –ö–æ–º–ø–∏–ª—è—Ü–∏—è TeX ‚Üí PDF
    file_name = f"Plan_{student.name}_{student.surname or ''}"
    pdf_path = generate_tex_pdf(tex_code, file_name)

    # 5) –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –≤ —á–∞—Ç (–∏–ª–∏ —Ñ–æ–ª–ª–±–µ–∫ –Ω–∞ TeX)
    try:
        await callback.message.answer_document(
            document=types.FSInputFile(pdf_path),
            caption=f"üìã –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è {student.name}"
        )
    except Exception:
        await callback.message.answer("üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å PDF, –≤–æ—Ç TeX-–∫–æ–¥:\n" + tex_code)

    # 6) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    if teacher.yandex_token:
        buffer = BytesIO(open(pdf_path, "rb").read())
        buffer.seek(0)
        await upload_bytes_to_yandex(
            file_obj=buffer,
            teacher=teacher,
            student=student,
            category="–ü–ª–∞–Ω",
            filename_base="Plan"
        )

    # 7) –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    #    –ë–ª–æ–∫ –ø–ª–∞–Ω–∞ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É,
    #    –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –≤—ã–∑–æ–≤—ã –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–µ—Ä—Å–∏—é

    import services.report_service as report_service
    

    await report_service.append_to_text_report(
        teacher_id=teacher.teacher_id,
        student_id=student.students_id,
        section="–ü–ª–∞–Ω",
        content=tex_code
    )
    # 8) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É—á–µ–Ω–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        extra = json.loads(student.other_inf or "{}")
        parts = []
        if extra.get("goal"):
            parts.append(f"üéØ –¶–µ–ª—å: {extra['goal']}")
        if extra.get("level"):
            parts.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: {extra['level']}")
        if extra.get("profile"):
            parts.append(f"üìù –ü—Ä–æ—Ñ–∏–ª—å: {extra['profile']}")
        info_text = "\n".join(parts) or "‚Äî"
    except Exception:
        info_text = student.other_inf or "‚Äî"

    await callback.message.answer(
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student.subject or '‚Äî'}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info_text}",
        reply_markup=student_actions_keyboard(student.students_id)
    )

    # 9) –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    new_count = await crud.increment_generation_count(teacher, student.students_id)
    if new_count == 41:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –æ—Å—Ç–∞–ª–æ—Å—å 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.",
            parse_mode="Markdown"
        )
    elif new_count == 50:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Å—è—Ü.",
            parse_mode="Markdown"
        )


from datetime import datetime
from io import BytesIO
from aiogram import types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Text
from services.storage_service import generate_tex_pdf, upload_bytes_to_yandex
from services.gpt_service import generate_assignment
from services.report_service import append_to_text_report
from database import crud
from keyboards.students import student_actions_keyboard
import services.report_service as report_service

@router.callback_query(Text(startswith="genassign:"))
async def callback_generate_assignment(callback: CallbackQuery, teacher, **data):
    student_id = int(callback.data.split(":")[1])
    student = await crud.get_student(teacher, student_id)
    if not student:
        return await callback.answer("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires) if teacher.subscription_expires else None
    except Exception:
        exp = None
    if not exp or exp < datetime.now():
        return await callback.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    current_count = student.monthly_gen_count or 0
    if current_count >= 50:
        return await callback.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.", show_alert=True)

    await callback.answer()
    await callback.message.edit_text("‚úèÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ...")

    # 3) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TeX-–∫–æ–¥–∞ –∑–∞–¥–∞–Ω–∏—è
    tex_code = await generate_assignment(
        student,
        model=teacher.model,
        language=teacher.language or "ru",
        output_format="tex"
    )

    # 4) –ö–æ–º–ø–∏–ª—è—Ü–∏—è TeX ‚Üí PDF
    file_name = f"Assignment_{student.name}_{student.surname or ''}"
    pdf_path = generate_tex_pdf(tex_code, file_name)

    # 5) –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –≤ —á–∞—Ç (–∏–ª–∏ —Ñ–æ–ª–ª–±–µ–∫ –Ω–∞ TeX)
    try:
        await callback.message.answer_document(
            document=types.FSInputFile(pdf_path),
            caption=f"üìù –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è {student.name}"
        )
    except Exception:
        await callback.message.answer("üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å PDF, –≤–æ—Ç TeX-–∫–æ–¥:\n" + tex_code)

    # 6) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    if teacher.yandex_token:
        buffer = BytesIO(open(pdf_path, "rb").read())
        buffer.seek(0)
        await upload_bytes_to_yandex(
            file_obj=buffer,
            teacher=teacher,
            student=student,
            category="–ö–ª–∞—Å—Å–Ω–∞—è_—Ä–∞–±–æ—Ç–∞",
            filename_base="Assignment"
        )

    # 7) –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
    await report_service.append_to_text_report(
        teacher_id=teacher.teacher_id,
        student_id=student.students_id,
        section="–ö–ª–∞—Å—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        content=tex_code
    )
    
    # 8) –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –≤—Å—ë –ª–∏ –µ–≥–æ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç
# 8) –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –≤—Å—ë –ª–∏ –µ–≥–æ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç
    from keyboards.students import confirm_generation_keyboard

    kb = confirm_generation_keyboard(student_id)
    await callback.message.answer("üßê –í–∞–º –≤—Å—ë –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏?", reply_markup=kb)

    # 9) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É—á–µ–Ω–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        extra = json.loads(student.other_inf or "{}")
        parts = []
        if extra.get("goal"):
            parts.append(f"üéØ –¶–µ–ª—å: {extra['goal']}")
        if extra.get("level"):
            parts.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: {extra['level']}")
        if extra.get("profile"):
            parts.append(f"üìù –ü—Ä–æ—Ñ–∏–ª—å: {extra['profile']}")
        info_text = "\n".join(parts) or "‚Äî"
    except Exception:
        info_text = student.other_inf or "‚Äî"

    await callback.message.answer(
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student.subject or '‚Äî'}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info_text}",
        reply_markup=student_actions_keyboard(student.students_id)
    )

    # 10) –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á—ë—Ç—á–∏–∫–∞ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    new_count = await crud.increment_generation_count(teacher, student.students_id)
    if new_count == 41:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –æ—Å—Ç–∞–ª–æ—Å—å 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.",
            parse_mode="Markdown"
        )
    elif new_count == 50:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Å—è—Ü.",
            parse_mode="Markdown"
        )


from datetime import datetime
from io import BytesIO
from aiogram import types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Text
from services.gpt_service import generate_homework, generate_classwork
from services.storage_service import generate_tex_pdf, upload_bytes_to_yandex
from services.report_service import append_to_text_report
from database import crud
from keyboards.students import student_actions_keyboard

@router.callback_query(Text(startswith="genhomework:"))
async def callback_generate_homework(callback: CallbackQuery, teacher, **data):
    student_id = int(callback.data.split(":")[1])
    student = await crud.get_student(teacher, student_id)
    if not student:
        return await callback.answer("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires) if teacher.subscription_expires else None
    except Exception:
        exp = None
    if not exp or exp < datetime.now():
        return await callback.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    current_count = student.monthly_gen_count or 0
    if current_count >= teacher.tokens_limit:
        return await callback.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.", show_alert=True)

    await callback.answer()
    await callback.message.edit_text("üìë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ...")

    # 1) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TeX-–∫–æ–¥–∞ –¥–æ–º–∞—à–∫–∏
    tex_code = await generate_homework(
        student,
        model=teacher.model,
        language=teacher.language or "ru",
        output_format="tex"
    )

    # 2) –ö–æ–º–ø–∏–ª—è—Ü–∏—è TeX ‚Üí PDF
    file_name = f"Homework_{student.name}_{student.surname or ''}"
    pdf_path = generate_tex_pdf(tex_code, file_name)

    # 3) –û—Ç–ø—Ä–∞–≤–∫–∞ PDF (–∏–ª–∏ —Ñ–æ–ª–ª–±–µ–∫ –Ω–∞ TeX)
    try:
        await callback.message.answer_document(
            document=types.FSInputFile(pdf_path),
            caption=f"üìë –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è {student.name}"
        )
    except Exception:
        await callback.message.answer("üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å PDF, –≤–æ—Ç TeX-–∫–æ–¥:\n" + tex_code)

    # 4) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    if teacher.yandex_token:
        buffer = BytesIO(open(pdf_path, "rb").read())
        buffer.seek(0)
        await upload_bytes_to_yandex(
            file_obj=buffer,
            teacher=teacher,
            student=student,
            category="–î–æ–º–∞—à–Ω—è—è_—Ä–∞–±–æ—Ç–∞",
            filename_base="Homework"
        )

    # 5) –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
    # handlers/students.py, –≤–Ω—É—Ç—Ä–∏ callback_generate_plan

    # handlers/students.py, –≤–Ω—É—Ç—Ä–∏ callback_generate_plan
    await report_service.append_to_text_report(
        teacher_id=teacher.teacher_id,
        student_id=student.students_id,
        section="–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞",
        content=tex_code
    )

    from keyboards.students import confirm_generation_keyboard

    kb = confirm_generation_keyboard(student_id)
    await callback.message.answer("üßê –í–∞–º –≤—Å—ë –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏?", reply_markup=kb)


    # 7) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É—á–µ–Ω–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        extra = json.loads(student.other_inf or "{}")
        parts = []
        if extra.get("goal"):
            parts.append(f"üéØ –¶–µ–ª—å: {extra['goal']}")
        if extra.get("level"):
            parts.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: {extra['level']}")
        if extra.get("profile"):
            parts.append(f"üìù –ü—Ä–æ—Ñ–∏–ª—å: {extra['profile']}")
        info_text = "\n".join(parts) or "‚Äî"
    except Exception:
        info_text = student.other_inf or "‚Äî"

    await callback.message.answer(
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student.subject or '‚Äî'}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info_text}",
        reply_markup=student_actions_keyboard(student.students_id)
    )

    # 8) –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á—ë—Ç—á–∏–∫–∞ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    new_count = await crud.increment_generation_count(teacher, student.students_id)
    if new_count == teacher.tokens_limit - 9:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –æ—Å—Ç–∞–ª–æ—Å—å 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.",
            parse_mode="Markdown"
        )
    elif new_count == teacher.tokens_limit:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Å—è—Ü.",
            parse_mode="Markdown"
        )



@router.callback_query(Text(startswith="genclasswork:"))
async def callback_generate_classwork(callback: CallbackQuery, teacher, **data):
    student_id = int(callback.data.split(":")[1])
    student = await crud.get_student(teacher, student_id)
    if not student:
        return await callback.answer("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires) if teacher.subscription_expires else None
    except Exception:
        exp = None
    if not exp or exp < datetime.now():
        return await callback.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    current_count = student.monthly_gen_count or 0
    if current_count >= teacher.tokens_limit:
        return await callback.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.", show_alert=True)

    await callback.answer()
    await callback.message.edit_text("üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ...")

    # 1) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TeX-–∫–æ–¥–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    tex_code = await generate_classwork(
        student,
        model=teacher.model,
        language=teacher.language or "ru",
        output_format="tex"
    )

    # 2) –ö–æ–º–ø–∏–ª—è—Ü–∏—è TeX ‚Üí PDF
    file_name = f"Classwork_{student.name}_{student.surname or ''}"
    pdf_path = generate_tex_pdf(tex_code, file_name)

    # 3) –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –∏–ª–∏ —Ñ–æ–ª–ª–±–µ–∫ –Ω–∞ TeX
    try:
        await callback.message.answer_document(
            document=types.FSInputFile(pdf_path),
            caption=f"üß™ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –¥–ª—è {student.name}"
        )
    except Exception:
        await callback.message.answer("üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å PDF, –≤–æ—Ç TeX-–∫–æ–¥:\n" + tex_code)

    # 4) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    if teacher.yandex_token:
        buffer = BytesIO(open(pdf_path, "rb").read())
        buffer.seek(0)
        await upload_bytes_to_yandex(
            file_obj=buffer,
            teacher=teacher,
            student=student,
            category="–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è_—Ä–∞–±–æ—Ç–∞",
            filename_base="Classwork"
        )

    # 5) –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
    # handlers/students.py, –≤–Ω—É—Ç—Ä–∏ callback_generate_plan
    await report_service.append_to_text_report(
        teacher_id=teacher.teacher_id,
        student_id=student.students_id,
        section="–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        content=tex_code
    )

    # 6) –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –≤—Å—ë –ª–∏ –µ–≥–æ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç
    from keyboards.students import confirm_generation_keyboard

    kb = confirm_generation_keyboard(student_id)
    await callback.message.answer("üßê –í–∞–º –≤—Å—ë –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏?", reply_markup=kb)

    await callback.message.answer("üßê –í–∞–º –≤—Å—ë –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —ç—Ç–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ?", reply_markup=approve_kb)

    # 7) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É—á–µ–Ω–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        extra = json.loads(student.other_inf or "{}")
        parts = []
        if extra.get("goal"):
            parts.append(f"üéØ –¶–µ–ª—å: {extra['goal']}")
        if extra.get("level"):
            parts.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: {extra['level']}")
        if extra.get("profile"):
            parts.append(f"üìù –ü—Ä–æ—Ñ–∏–ª—å: {extra['profile']}")
        info_text = "\n".join(parts) or "‚Äî"
    except Exception:
        info_text = student.other_inf or "‚Äî"

    await callback.message.answer(
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student.subject or '‚Äî'}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info_text}",
        reply_markup=student_actions_keyboard(student.students_id)
    )

    # 8) –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á—ë—Ç—á–∏–∫–∞ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    new_count = await crud.increment_generation_count(teacher, student.students_id)
    if new_count == teacher.tokens_limit - 9:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –æ—Å—Ç–∞–ª–æ—Å—å 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.",
            parse_mode="Markdown"
        )
    elif new_count == teacher.tokens_limit:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Å—è—Ü.",
            parse_mode="Markdown"
        )
from datetime import datetime
from io import BytesIO
from aiogram import types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Text
from services.gpt_service import generate_learning_materials
from services.storage_service import generate_tex_pdf, upload_bytes_to_yandex
from services.report_service import append_to_text_report
from database import crud
from keyboards.students import student_actions_keyboard

@router.callback_query(Text(startswith="genmaterials:"))
async def callback_generate_materials(callback: CallbackQuery, teacher, **data):
    student_id = int(callback.data.split(":")[1])
    student = await crud.get_student(teacher, student_id)
    if not student:
        return await callback.answer("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires) if teacher.subscription_expires else None
    except Exception:
        exp = None
    if not exp or exp < datetime.now():
        return await callback.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    current_count = student.monthly_gen_count or 0
    if current_count >= teacher.tokens_limit:
        return await callback.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.", show_alert=True)

    await callback.answer()
    await callback.message.edit_text("üìö –ü–æ–¥–±–æ—Ä –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ...")

    # 3) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TeX-–∫–æ–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    tex_code = await generate_learning_materials(
        student,
        model=teacher.model,
        language=teacher.language or "ru",
        output_format="tex"
    )

    # 4) –ö–æ–º–ø–∏–ª—è—Ü–∏—è TeX ‚Üí PDF
    file_name = f"Materials_{student.name}_{student.surname or ''}"
    pdf_path = generate_tex_pdf(tex_code, file_name)

    # 5) –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –∏–ª–∏ —Ñ–æ–ª–ª–±–µ–∫ –Ω–∞ TeX
    try:
        await callback.message.answer_document(
            document=types.FSInputFile(pdf_path),
            caption=f"üìö –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è {student.name}"
        )
    except Exception:
        await callback.message.answer("üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å PDF, –≤–æ—Ç TeX-–∫–æ–¥:\n" + tex_code)

    # 6) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    if teacher.yandex_token:
        buffer = BytesIO(open(pdf_path, "rb").read())
        buffer.seek(0)
        await upload_bytes_to_yandex(
            file_obj=buffer,
            teacher=teacher,
            student=student,
            category="–û–±—É—á–∞—é—â–∏–µ_–º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            filename_base="Materials"
        )

    # 7) –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
    await report_service.append_to_text_report(
        teacher_id=teacher.teacher_id,
        student_id=student.students_id,
        section="–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        content=tex_code
    )

    # 8) –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –≤—Å—ë –ª–∏ –µ–≥–æ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç
    from keyboards.students import confirm_generation_keyboard

    kb = confirm_generation_keyboard(student_id)
    await callback.message.answer("üßê –í–∞–º –≤—Å—ë –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏?", reply_markup=kb)

    # 9) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É—á–µ–Ω–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        extra = json.loads(student.other_inf or "{}")
        parts = []
        if extra.get("goal"):
            parts.append(f"üéØ –¶–µ–ª—å: {extra['goal']}")
        if extra.get("level"):
            parts.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: {extra['level']}")
        if extra.get("profile"):
            parts.append(f"üìù –ü—Ä–æ—Ñ–∏–ª—å: {extra['profile']}")
        info_text = "\n".join(parts) or "‚Äî"
    except Exception:
        info_text = student.other_inf or "‚Äî"

    await callback.message.answer(
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student.subject or '‚Äî'}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info_text}",
        reply_markup=student_actions_keyboard(student.students_id)
    )

    # 10) –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á—ë—Ç—á–∏–∫–∞ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    new_count = await crud.increment_generation_count(teacher, student.students_id)
    if new_count == teacher.tokens_limit - 9:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –æ—Å—Ç–∞–ª–æ—Å—å 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.",
            parse_mode="Markdown"
        )
    elif new_count == teacher.tokens_limit:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Å—è—Ü.",
            parse_mode="Markdown"
        )

@router.callback_query(Text(startswith="check_solution:"))
async def cb_check_solution(callback: CallbackQuery, state: FSMContext, teacher):
    student_id = int(callback.data.split(":")[1])
    await callback.answer()
    await callback.message.edit_text("üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—à–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ (—Ç–µ–∫—Å—Ç–æ–º).")
    await state.update_data(student_id=student_id)
    await state.set_state(StudentStates.awaiting_solution)

@router.message(StateFilter(StudentStates.awaiting_solution))
async def process_solution(message: Message, state: FSMContext):
    await state.update_data(solution=message.text)
    await message.answer("‚úèÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏.")
    await state.set_state(StudentStates.awaiting_expected)

@router.message(StateFilter(StudentStates.awaiting_expected))
async def process_expected(message: Message, state: FSMContext, teacher):
    data = await state.get_data()
    student = await crud.get_student(teacher, data["student_id"])
    from services.gpt_service import ask_gpt
    prompt = (
        f"–ü—Ä–æ–≤–µ—Ä—å —Ä–µ—à–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞:\n\n"
        f"–†–µ—à–µ–Ω–∏–µ: {data['solution']}\n"
        f"–≠—Ç–∞–ª–æ–Ω: {message.text}\n"
        f"–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—à–∏–±–æ–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
    )
    result = await ask_gpt(prompt,
                           system_prompt="–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–ø–µ–¥–∞–≥–æ–≥, –æ—Ü–µ–Ω–∏–≤–∞—é—â–∏–π –æ—Ç–≤–µ—Ç—ã —É—á–µ–Ω–∏–∫–æ–≤.",
                           model=teacher.model,
                           student_id=student.students_id)
    await message.answer(f"‚úÖ –û—Ü–µ–Ω–∫–∞:\n{result}")
    await state.clear()


@router.callback_query(Text(startswith="chat_gpt:"))
async def cb_chat_gpt(callback: CallbackQuery, state: FSMContext, teacher):
    student_id = int(callback.data.split(":")[1])
    await callback.answer()
    await callback.message.edit_text("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç –∏–º–µ–Ω–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
    await state.update_data(student_id=student_id)
    await state.set_state(StudentStates.chatting)

@router.message(StateFilter(StudentStates.chatting))
async def process_chat(message: Message, state: FSMContext, teacher):
    data = await state.get_data()
    student = await crud.get_student(teacher, data["student_id"])
    from services.gpt_service import chat_with_gpt
    response = await chat_with_gpt(
        student,
        model=teacher.model,
        user_message=message.text,
        language=teacher.language or "ru"
    )
    await message.answer(response)
    # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –≤—ã—Ö–æ–¥ –ø–æ /cancel, –º–æ–∂–Ω–æ –ª–æ–≤–∏—Ç—å –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ


from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter, Text

# 1) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ¬ª
@router.callback_query(Text(startswith="check_solution:"))
async def callback_check_solution(callback: CallbackQuery, state: FSMContext, teacher):
    student_id = int(callback.data.split(":")[1])
    await callback.answer()
    await callback.message.edit_text(
        "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        reply_markup=None
    )
    await state.set_state(StudentStates.awaiting_solution_text)
    await state.update_data(student_id=student_id)

# 2) –ü–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç —Ä–µ—à–µ–Ω–∏—è
@router.message(StateFilter(StudentStates.awaiting_solution_text))
async def process_solution_text(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(solution_text=message.text)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏.")
    await state.set_state(StudentStates.awaiting_expected_solution)

# 3) –ü–æ–ª—É—á–∏–ª–∏ —ç—Ç–∞–ª–æ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º GPT-–ø—Ä–æ–≤–µ—Ä–∫—É
@router.message(StateFilter(StudentStates.awaiting_expected_solution))
async def process_expected_solution(message: Message, state: FSMContext, teacher):
    data = await state.get_data()
    student = await crud.get_student(teacher, data["student_id"])
    expected = message.text
    solution = data["solution_text"]
    from services.gpt_service import ask_gpt
    prompt = (
        f"–£—á–µ–Ω–∏–∫ –¥–∞–ª —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç: {solution}\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç/–∫—Ä–∏—Ç–µ—Ä–∏–∏: {expected}\n"
        "–û—Ü–µ–Ω–∏ –∏ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π."
    )
    review = await ask_gpt(prompt,
                           system_prompt="–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–±–æ—Ç.",
                           model=teacher.model,
                           student_id=student.students_id)
    await message.answer(f"üìù –ü—Ä–æ–≤–µ—Ä–∫–∞:\n{review}")
    await state.clear()

@router.callback_query(Text(startswith="chat_gpt:"))
async def callback_chat_gpt(callback: CallbackQuery, state: FSMContext, teacher):
    student_id = int(callback.data.split(":")[1])
    await callback.answer()
    await callback.message.edit_text("üí¨ –í–≤–æ–¥–∏—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—á–µ–Ω–∏–∫—É.")
    await state.set_state(StudentStates.chatting_with_gpt)
    await state.update_data(student_id=student_id)

@router.message(StateFilter(StudentStates.chatting_with_gpt))
async def process_chat_gpt(message: Message, state: FSMContext, teacher):
    data = await state.get_data()
    student = await crud.get_student(teacher, data["student_id"])
    from services.gpt_service import chat_with_gpt
    reply = await chat_with_gpt(
        student,
        model=teacher.model,
        user_message=message.text,
        language="ru"
    )
    await message.answer(reply)
    # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥

from aiogram.filters import Text
from aiogram.types import CallbackQuery

@router.callback_query(Text(startswith="reports_confirm:"))
async def callback_reports_confirm(
    callback: CallbackQuery,
    teacher,  # –±–µ—Ä—ë—Ç—Å—è —á–µ—Ä–µ–∑ middleware
    **data
):
    await callback.answer("–û—Ç–ª–∏—á–Ω–æ, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.", show_alert=True)

    student_id = int(callback.data.split(":", 1)[1])
    student = await crud.get_student(teacher, student_id)
    if not student:
        return await callback.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –û—Ç–æ–±—Ä–∞–∑–∏–º –∫–∞—Ä—Ç–æ—á–∫—É —É—á–µ–Ω–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ
    from keyboards.students import student_actions_keyboard
    other_inf = student.other_inf or "{}"
    # (–ø–∞—Ä—Å–∏–º goal/level –∫–∞–∫ —É –≤–∞—Å –±—ã–ª–æ)
    text = (
        f"üë§ {student.name} {student.surname}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student.subject}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        # ... –≤–∞—à —Ñ–æ—Ä–º–∞—Ç –ø–æ–∫–∞–∑–∞ –¥–æ–ø. –∏–Ω—Ñ–æ ...
    )
    await callback.message.edit_text(
        text,
        reply_markup=student_actions_keyboard(student.students_id)
    )


from aiogram.filters import Text
from aiogram.types import CallbackQuery

@router.callback_query(Text(startswith="confirm_yes:"))
async def on_confirm_yes(callback: CallbackQuery, teacher, **data):
    student_id = int(callback.data.split(":", 1)[1])
    await callback.answer("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.", show_alert=True)
    # —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞
    student = await crud.get_student(teacher, student_id)
    from keyboards.students import student_actions_keyboard
    await callback.message.edit_text(
        f"üë§ {student.name} {student.surname}\nüìö {student.subject}",
        reply_markup=student_actions_keyboard(student_id)
    )

@router.callback_query(Text(startswith="confirm_no:"))
async def on_confirm_no(callback: CallbackQuery, state: FSMContext, **data):
    student_id = int(callback.data.split(":", 1)[1])
    await callback.answer()
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º FSM –≤ —Ä–µ–∂–∏–º —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    await state.update_data(student_id=student_id)
    await state.set_state(StudentStates.await_generation_feedback)
    await callback.message.answer(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:"
    )


from aiogram import F
from aiogram.filters import StateFilter
from aiogram.types import Message
from services.gpt_service import generate_homework  # –∏–ª–∏ –¥—Ä—É–≥–∞—è –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è
import database.crud as crud
from aiogram.filters import StateFilter, Text
from states.student_states import StudentStates
from keyboards.students import confirm_generation_keyboard


@router.message(StateFilter(StudentStates.await_generation_feedback))
async def process_generation_feedback(
    message: Message,
    state: FSMContext,
    teacher  # –±–µ—Ä–µ—Ç—Å—è –∏–∑ –≤–∞—à–µ–≥–æ auth middleware
):
    # –ø–æ–ª—É—á–∞–µ–º –∏–∑ state, –∫ –∫–∞–∫–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ñ–∏–¥–±–µ–∫
    data = await state.get_data()
    student_id = data.get("student_id")
    feedback   = message.text

    # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await crud.get_student(teacher, student_id)

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å —É—á—ë—Ç–æ–º —Ñ–∏–¥–±–µ–∫–∞
    tex = await generate_homework(
        student,
        model=teacher.model,
        language=teacher.language,
        output_format="tex",
        feedback=feedback
    )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º PDF, –∑–∞–ª–∏–≤–∞–µ–º –≤ –Ø.–î–∏—Å–∫ –∏ –≤ –æ—Ç—á—ë—Ç, –∫–∞–∫ –¥–µ–ª–∞–ª–∏ —Ä–∞–Ω—å—à–µ
    from services.storage_service import generate_tex_pdf, upload_bytes_to_yandex
    from aiogram.types import FSInputFile
    from io import BytesIO

    # 1) –ö–æ–º–ø–∏–ª—è—Ü–∏—è –≤ PDF
    file_name = f"Homework_{student.name}_{student.surname}"
    pdf_path = generate_tex_pdf(tex, file_name)

    # 2) –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
    await message.answer_document(FSInputFile(pdf_path), caption="üìù –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")

    # 3) –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    if teacher.yandex_token:
        buf = BytesIO(open(pdf_path, "rb").read())
        buf.seek(0)
        await upload_bytes_to_yandex(
            file_obj=buf,
            teacher=teacher,
            student=student,
            category="–î–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã",
            filename_base=file_name
        )

    # 4) –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É –≤–µ—Ä—Å–∏—é –≤ –æ—Ç—á—ë—Ç
    await crud.append_to_report(student_id, "–î–æ–º–∞—à–∫–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)", tex)

    # 5) –°–Ω–æ–≤–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, –≤—Å—ë –ª–∏ –æ–∫? –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º FSM
    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –µ—â—ë —á—Ç–æ-—Ç–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.", 
                         reply_markup=confirm_generation_keyboard(student_id))

    # 6) –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º student_id –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞—Ö–æ–¥–∞
    await state.clear()

