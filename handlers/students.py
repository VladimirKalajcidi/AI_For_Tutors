from aiogram import Router, types
from aiogram.filters import Text, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
import json
from sqlalchemy import select
from aiogram.filters import StateFilter
import database.crud as crud
from keyboards.students import students_list_keyboard, student_actions_keyboard
from states.student_states import StudentStates
from keyboards.students import edit_student_keyboard, yandex_materials_keyboard
from database.db import async_session
from database.models import Student
from aiogram import F, Bot
from io import BytesIO
from services import storage_service
from keyboards.students import subject_keyboard, direction_keyboard

router = Router()

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
@router.message(Command("add_student"))
async def add_student_start(message: types.Message, state: FSMContext):
    await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —É—á–µ–Ω–∏–∫–∞:", reply_markup=subject_keyboard())
    await state.set_state(StudentStates.enter_subject)

@router.message(StudentStates.enter_subject)
async def process_subject(message: Message, state: FSMContext):
    await state.update_data(subject=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=direction_keyboard())
    await state.set_state(StudentStates.enter_direction)

@router.message(StudentStates.enter_direction)
async def process_direction(message: Message, state: FSMContext):
    await state.update_data(direction=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentStates.enter_name)

@router.message(StudentStates.enter_name)
async def process_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentStates.enter_surname)

@router.message(StudentStates.enter_surname)
async def process_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentStates.enter_class)

@router.message(StudentStates.enter_class)
async def process_grade(message: Message, state: FSMContext):
    await state.update_data(grade=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentStates.enter_phone)

@router.message(StudentStates.enter_phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentStates.enter_parent_phone)

@router.message(StudentStates.enter_parent_phone)
async def process_parent_phone(message: Message, state: FSMContext):
    await state.update_data(parent_phone=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏) –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç:")
    await state.set_state(StudentStates.enter_profile)

@router.message(StudentStates.enter_profile)
async def process_profile(message: Message, state: FSMContext):
    await state.update_data(profile=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –æ–±—É—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentStates.enter_goal)

@router.message(StudentStates.enter_goal)
async def process_goal(message: Message, state: FSMContext):
    await state.update_data(goal=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentStates.enter_level)

from database.db import async_session

@router.message(StudentStates.enter_level)
async def process_level(message: Message, state: FSMContext, **data):
    from database.db import async_session
    teacher = data.get("teacher")
    level = message.text.strip()
    student_data = await state.get_data()

    other_info = json.dumps({
        "profile": student_data.get("profile"),
        "goal": student_data.get("goal"),
        "level": level
    })

    async with async_session() as session:
        new_student = await crud.create_student(
            session=session,
            teacher_id=teacher.teacher_id,
            name=student_data.get("first_name"),
            surname=student_data.get("last_name"),
            class_=student_data.get("grade"),
            subject=student_data.get("subject"),
            direction=student_data.get("direction"),
            phone=student_data.get("phone"),
            parent_phone=student_data.get("parent_phone"),
            other_inf=other_info  # ‚ö†Ô∏è not other_info
        )


    await message.answer(f"‚úÖ –£—á–µ–Ω–∏–∫ \"{new_student.name} {new_student.surname}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    students = await crud.list_students(teacher)
    await message.answer("üìã –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:", reply_markup=students_list_keyboard(students))
    await state.clear()


@router.message(Text(text=["üë®‚Äçüéì –£—á–µ–Ω–∏–∫–∏", "üë®‚Äçüéì Students"]))
async def menu_students(message: Message, state: FSMContext, **data):
    teacher = data.get("teacher")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    from datetime import datetime
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires) if teacher.subscription_expires else None
    except Exception:
        exp = None
    if not exp or exp < datetime.now():
        await message.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å —É—á–µ–Ω–∏–∫–∞–º–∏.")
        return
    students = await crud.list_students(teacher)
    if not students:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_student, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞.")
    else:
        await message.answer("üë®‚Äçüéì –í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:", reply_markup=students_list_keyboard(students))




@router.message(Command("add_student"))
async def cmd_add_student(message: Message, state: FSMContext):
    await add_student_start(message, state)

@router.callback_query(Text("add_student"))
async def callback_add_student(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await add_student_start(callback.message, state)


@router.callback_query(Text(startswith="student:"))
async def callback_view_student(callback: types.CallbackQuery, **data):
    teacher = data.get("teacher")
    if not teacher:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", show_alert=True)
        return
    parts = callback.data.split(":")
    if len(parts) < 2 or not parts[1].isdigit():
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: ID —É—á–µ–Ω–∏–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω.")
        return
    students_id = int(parts[1])
    student = await crud.get_student(teacher, students_id)
    if not student:
        await callback.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    # –ü–∞—Ä—Å–∏–º –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    try:
        extra = json.loads(student.other_inf or "{}")
        goal = extra.get("goal", "‚Äî")
        level = extra.get("level", "‚Äî")
    except Exception:
        goal = level = "‚Äî"
    text = (
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üéØ –¶–µ–ª—å: {goal}\n"
        f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {student.report_student.progress if (hasattr(student, 'report_student') and student.report_student) else '‚Äî'}"
    )
    await callback.message.edit_text(text, reply_markup=student_actions_keyboard(student.students_id))


@router.callback_query(Text(startswith="back_students"))
async def back_to_students(callback: CallbackQuery, **data):
    teacher = data.get("teacher")
    await callback.answer()
    students = await crud.list_students(teacher)
    if not students:
        await callback.message.edit_text("No students yet.")
    else:
        await callback.message.edit_text("Your students:", reply_markup=students_list_keyboard(students))




@router.callback_query(Text(startswith="upload:"))
async def callback_upload_file(callback: CallbackQuery, state: FSMContext, **data):
    teacher = data.get("teacher")
    students_id = int(callback.data.split(":")[1])
    if not teacher.yandex_token:
        await callback.answer()
        await callback.message.answer("‚ö†Ô∏è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    await callback.answer()
    await state.set_state(StudentStates.waiting_for_file)
    await state.update_data(students_id=students_id)
    await callback.message.edit_text("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç) –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞.")



@router.message(StudentStates.waiting_for_file)
async def process_file_upload(message: Message, state: FSMContext, bot: Bot, **data):
    teacher = data.get("teacher")
    if not message.document:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª-–¥–æ–∫—É–º–µ–Ω—Ç.")
        return
    state_data = await state.get_data()
    students_id = state_data.get("students_id")
    file_name = message.document.file_name or "file"
    file = await bot.get_file(message.document.file_id)
    buffer = BytesIO()
    await bot.download_file(file.file_path, buffer)
    buffer.seek(0)

    from sqlalchemy import select

    async with async_session() as session:
        result = await session.execute(select(Student).where(Student.students_id == students_id))
        student = result.scalar_one_or_none()
    if not student:
        await message.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    success = await storage_service.upload_bytes_to_yandex(
        file_obj=buffer,
        teacher=teacher,
        student=student,
        category="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
        filename_base=file_name.rsplit(".", 1)[0]
    )
    if success:
        await message.answer(f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã).")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø.–î–∏—Å–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
    await state.clear()






@router.callback_query(Text(startswith="edit_student:"))
async def callback_edit_student(callback: CallbackQuery):
    students_id = int(callback.data.split(":")[1])
    await callback.answer()
    await callback.message.edit_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=edit_student_keyboard(students_id)
    )

@router.callback_query(Text(startswith="edit_field:"))
async def callback_edit_field(callback: CallbackQuery, state: FSMContext):
    _, students_id, field = callback.data.split(":")
    await state.set_state(StudentStates.editing_field)  # <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ
    await state.update_data(students_id=int(students_id), field=field)
    await callback.answer()
    await callback.message.edit_text(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: *{field}*", parse_mode="Markdown")


@router.message(StateFilter(StudentStates.editing_field))
async def process_student_field_edit(message: Message, state: FSMContext, **data):

    state_data = await state.get_data()
    students_id = state_data.get("students_id")
    field = state_data.get("field")
    teacher = data.get("teacher")

    if not students_id or not field:
        return  # –Ω–µ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    new_value = message.text.strip()
    await crud.update_student_field(teacher, students_id, field, new_value)
    await state.clear()
    await message.answer(f"‚úÖ –ü–æ–ª–µ *{field}* –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", parse_mode="Markdown")

    student = await crud.get_student(teacher, students_id)
    other_inf = student.other_inf or "{}"
    try:
        info = json.loads(other_inf)
    except json.JSONDecodeError:
        info_text = other_inf    # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ JSON, –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else:
        parts = []
        if info.get("goal"):
            parts.append(f"üéØ –¶–µ–ª—å: {info['goal']}")
        if info.get("level"):
            parts.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: {info['level']}")
        if info.get("profile"):
            parts.append(f"üìù –ü—Ä–æ—Ñ–∏–ª—å: {info['profile']}")
        info_text = "\n".join(parts) or "‚Äî"

    await message.answer(
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student.subject or '‚Äî'}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info_text}",
        reply_markup=student_actions_keyboard(student.students_id)
    )


@router.callback_query(Text(startswith="delete_student:"))
async def callback_delete_student(callback: CallbackQuery):
    students_id = int(callback.data.split(":")[1])
    await callback.answer()
    await callback.message.edit_text(
        "‚ùóÔ∏è–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞?",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{students_id}")],
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"student:{students_id}")]
        ])
    )

@router.callback_query(Text(startswith="confirm_delete:"))
async def callback_confirm_delete(callback: CallbackQuery, **data):
    teacher = data.get("teacher")
    students_id = int(callback.data.split(":")[1])
    await crud.delete_student(teacher, students_id)
    await callback.answer("üóë –£—á–µ–Ω–∏–∫ —É–¥–∞–ª—ë–Ω")

    students = await crud.list_students(teacher)
    if students:
        await callback.message.edit_text("üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω:", reply_markup=students_list_keyboard(students))
    else:
        await callback.message.edit_text("–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")


@router.callback_query(Text(startswith="yadisk:"))
async def callback_yadisk_menu(callback: CallbackQuery):
    students_id = int(callback.data.split(":")[1])
    await callback.message.edit_text(
        "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:",
        reply_markup=yandex_materials_keyboard(students_id)
    )


@router.callback_query(Text(startswith="upload_material:"))
async def callback_select_material_type(callback: CallbackQuery, state: FSMContext):
    _, students_id, material_type = callback.data.split(":")
    await state.set_state(StudentStates.waiting_for_file)
    await state.update_data(students_id=int(students_id), material_type=material_type)
    await callback.message.edit_text("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")

@router.message(StudentStates.waiting_for_file)
async def handle_file_upload(message: Message, state: FSMContext, teacher):
    data = await state.get_data()
    students_id = data.get("students_id")
    material_type = data.get("material_type")
    
    if not teacher.yandex_token:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    if not message.document:
        await message.answer("‚ö†Ô∏è –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç!")
        return

    from aiogram import Bot
    import io
    from database.db import AsyncSessionLocal
    from database.models import Student

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    bot: Bot = message.bot
    file = await bot.get_file(message.document.file_id)
    buffer = io.BytesIO()
    await bot.download_file(file.file_path, destination=buffer)
    buffer.seek(0)

    from sqlalchemy import select


    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —É—á–µ–Ω–∏–∫–∞
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Student).where(Student.students_id == students_id))
        student = result.scalar_one_or_none()

    if not student:
        await message.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ù–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ –ø–æ —Ç–∏–ø—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    folder_map = {
        "homework": "–î–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã",
        "assignment": "–ö–ª–∞—Å—Å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
        "theory": "–¢–µ–æ—Ä–∏—è",
        "plan": "–ü–ª–∞–Ω—ã",
        "report": "–û—Ç—á—ë—Ç—ã",
        "checked": "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ"
    }
    category = folder_map.get(material_type, "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    filename_base = message.document.file_name.rsplit(".", 1)[0]
    success = await storage_service.upload_bytes_to_yandex(
        file_obj=buffer,
        teacher=teacher,
        student=student,
        category=category,
        filename_base=filename_base
    )

    await state.clear()

    if success:
        await message.answer(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–ø–∫—É `{category}` –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.")


...

@router.callback_query(Text(startswith="edit_days:"))
async def callback_edit_days(callback: CallbackQuery, state: FSMContext):
    students_id = int(callback.data.split(":")[1])
    await state.set_state(StudentStates.editing_days)
    await state.update_data(students_id=students_id, selected_days=[])

    buttons = [
        [types.InlineKeyboardButton(text=day, callback_data=f"toggle_day:{day}") for day in ["Mon", "Tue", "Wed"]],
        [types.InlineKeyboardButton(text=day, callback_data=f"toggle_day:{day}") for day in ["Thu", "Fri", "Sat"]],
        [types.InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_days"),
         types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"student:{students_id}")]
    ]
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –∑–∞–Ω—è—Ç–∏–π (–Ω–∞–∂–º–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã):",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
    )

@router.callback_query(Text(startswith="toggle_day:"))
async def toggle_day_selection(callback: CallbackQuery, state: FSMContext):
    day = callback.data.split(":")[1]
    await state.update_data(current_day=day)
    await callback.message.answer(f"üïì –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM –¥–ª—è {day}:")
    await state.set_state(StudentStates.enter_day_time)


@router.callback_query(Text("save_days"))
async def save_schedule_days(callback: CallbackQuery, state: FSMContext, **data):
    from datetime import time
    teacher = data.get("teacher")
    state_data = await state.get_data()
    students_id = state_data.get("students_id")
    schedule = state_data.get("schedule_data", {})

    for day, time_range in schedule.items():
        start_h, start_m = map(int, time_range["start"].split(":"))
        end_h, end_m = map(int, time_range["end"].split(":"))
        await crud.set_student_schedule_template(
            teacher=teacher,
            student_id=students_id,
            days=[day],
            start_time=time(start_h, start_m),
            end_time=time(end_h, end_m)
        )

    await state.clear()
    await callback.message.answer("‚úÖ –î–Ω–∏ –∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=student_actions_keyboard(students_id))



@router.message(StudentStates.set_schedule_time)
async def process_schedule_time(message: Message, state: FSMContext, **data):
    import json
    from database import crud
    from datetime import time

    teacher = data.get("teacher")
    input_time = message.text.strip()
    try:
        start_str, end_str = input_time.split("-")
        start_h, start_m = map(int, start_str.split(":"))
        end_h, end_m = map(int, end_str.split(":"))
        start_time = time(start_h, start_m)
        end_time = time(end_h, end_m)
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ HH:MM-HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:00-17:30).")
        return

    state_data = await state.get_data()
    students_id = state_data.get("students_id")
    days = state_data.get("selected_days", [])

    # üóìÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ë–î —á–µ—Ä–µ–∑ crud
    await crud.set_student_schedule_template(
        teacher=teacher,
        student_id=students_id,
        days=days,
        start_time=start_time,
        end_time=end_time
    )

    await message.answer("‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=student_actions_keyboard(students_id))
    await state.clear()


@router.message(StudentStates.enter_day_time)
async def process_day_time(message: Message, state: FSMContext):
    input_time = message.text.strip()
    data = await state.get_data()
    day = data.get("current_day")
    schedule = data.get("schedule_data", {})

    try:
        start_str, end_str = input_time.split("-")
        start_h, start_m = map(int, start_str.split(":"))
        end_h, end_m = map(int, end_str.split(":"))
        schedule[day] = {"start": f"{start_h:02}:{start_m:02}", "end": f"{end_h:02}:{end_m:02}"}
        await state.update_data(schedule_data=schedule)
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 16:00-17:30")
        return

    await message.answer("‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –¥–µ–Ω—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.")
    await state.set_state(StudentStates.editing_days)

@router.callback_query(Text(startswith="reports:"))
async def callback_generate_report(callback: CallbackQuery, teacher, **data):
    student_id = int(callback.data.split(":")[1])
    student = await crud.get_student(teacher, student_id)
    if not student:
        return await callback.answer("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    from datetime import datetime
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires) if teacher.subscription_expires else None
    except Exception:
        exp = None
    if not exp or exp < datetime.now():
        return await callback.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    current_count = student.monthly_gen_count or 0
    if current_count >= 50:
        return await callback.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.", show_alert=True)

    await callback.answer()
    await callback.message.edit_text("üìë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ...")

    # 1) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TeX-–∫–æ–¥ –æ—Ç—á—ë—Ç–∞, –ø–µ—Ä–µ–¥–∞–≤ –º–æ–¥–µ–ª—å –∏–∑ teacher
    from services.gpt_service import generate_report
    tex_code = await generate_report(
        student,
        model=teacher.model,
        language=teacher.language or "ru",
        output_format="tex"     # —Ñ–ª–∞–≥, —á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª LaTeX
    )

    # 2) –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º TeX –≤ PDF
    from services.storage_service import generate_tex_pdf
    file_name = f"Report_{student.name}_{student.surname}"
    pdf_path = generate_tex_pdf(tex_code, file_name)

    # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –≤ —á–∞—Ç
    try:
        await callback.message.answer_document(
            document=types.FSInputFile(pdf_path),
            caption=f"üìë –û—Ç—á—ë—Ç –ø–æ —É—á–µ–Ω–∏–∫—É {student.name}"
        )
    except Exception:
        # fallback: –æ—Ç–ø—Ä–∞–≤–∏–º raw TeX, –µ—Å–ª–∏ PDF –Ω–µ —Å–æ–±—Ä–∞–ª—Å—è
        await callback.message.answer("üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å PDF, –≤–æ—Ç TeX-–∫–æ–¥:\n" + tex_code)

    # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á—ë–Ω)
    if teacher.yandex_token:
        from io import BytesIO
        buffer = BytesIO(open(pdf_path, "rb").read())
        buffer.seek(0)
        await storage_service.upload_bytes_to_yandex(
            file_obj=buffer,
            teacher=teacher,
            student=student,
            category="–û—Ç—á—ë—Ç—ã",
            filename_base="Report"
        )

    # 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É—á–µ–Ω–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    other_inf = student.other_inf or "{}"
    try:
        info = json.loads(other_inf)
    except json.JSONDecodeError:
        info_text = other_inf    # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ JSON, –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else:
        parts = []
        if info.get("goal"):
            parts.append(f"üéØ –¶–µ–ª—å: {info['goal']}")
        if info.get("level"):
            parts.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: {info['level']}")
        if info.get("profile"):
            parts.append(f"üìù –ü—Ä–æ—Ñ–∏–ª—å: {info['profile']}")
        info_text = "\n".join(parts) or "‚Äî"

    await callback.message.answer(
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student.subject or '‚Äî'}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info_text}",
        reply_markup=student_actions_keyboard(student.students_id)
    )

    # 6) –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤
    new_count = await crud.increment_generation_count(teacher, student.students_id)
    if new_count == 41:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –æ—Å—Ç–∞–ª–æ—Å—å 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.",
            parse_mode="Markdown"
        )
    elif new_count == 50:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Å—è—Ü.",
            parse_mode="Markdown"
        )

    

@router.callback_query(Text(startswith="genplan:"))
async def callback_generate_plan(callback: CallbackQuery, teacher, **data):
    student_id = int(callback.data.split(":")[1])
    student = await crud.get_student(teacher, student_id)
    if not student:
        return await callback.answer("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    from datetime import datetime
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires) if teacher.subscription_expires else None
    except Exception:
        exp = None
    if not exp or exp < datetime.now():
        return await callback.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    current_count = student.monthly_gen_count or 0
    if current_count >= 50:
        return await callback.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.", show_alert=True)

    await callback.answer()
    await callback.message.edit_text("‚úèÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ...")

    # 3) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TeX-–∫–æ–¥–∞ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
    from services.gpt_service import generate_study_plan
    tex_code = await generate_study_plan(
        student,
        model=teacher.model,
        language=teacher.language or "ru",
        output_format="tex"
    )

    # 4) –ö–æ–º–ø–∏–ª—è—Ü–∏—è TeX ‚Üí PDF
    from services.storage_service import generate_tex_pdf
    file_name = f"Plan_{student.name}_{student.surname or ''}"
    pdf_path = generate_tex_pdf(tex_code, file_name)

    # 5) –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –≤ —á–∞—Ç (–∏–ª–∏ —Ñ–æ–ª–ª–±–µ–∫ –Ω–∞ TeX)
    from aiogram import types
    from io import BytesIO
    try:
        await callback.message.answer_document(
            document=types.FSInputFile(pdf_path),
            caption=f"üìã –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è {student.name}"
        )
    except Exception:
        await callback.message.answer("üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å PDF, –≤–æ—Ç TeX-–∫–æ–¥:\n" + tex_code)

    # 6) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    if teacher.yandex_token:
        buffer = BytesIO(open(pdf_path, "rb").read())
        buffer.seek(0)
        await storage_service.upload_bytes_to_yandex(
            file_obj=buffer,
            teacher=teacher,
            student=student,
            category="–ü–ª–∞–Ω",
            filename_base="Plan"
        )

    # 7) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É—á–µ–Ω–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    other_inf = student.other_inf or "{}"
    try:
        info = json.loads(other_inf)
    except json.JSONDecodeError:
        info_text = other_inf    # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ JSON, –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else:
        parts = []
        if info.get("goal"):
            parts.append(f"üéØ –¶–µ–ª—å: {info['goal']}")
        if info.get("level"):
            parts.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: {info['level']}")
        if info.get("profile"):
            parts.append(f"üìù –ü—Ä–æ—Ñ–∏–ª—å: {info['profile']}")
        info_text = "\n".join(parts) or "‚Äî"

    await callback.message.answer(
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student.subject or '‚Äî'}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info_text}",
        reply_markup=student_actions_keyboard(student.students_id)
)

    # 8) –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    new_count = await crud.increment_generation_count(teacher, student.students_id)
    if new_count == 41:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –æ—Å—Ç–∞–ª–æ—Å—å 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.",
            parse_mode="Markdown"
        )
    elif new_count == 50:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Å—è—Ü.",
            parse_mode="Markdown"
        )



@router.callback_query(Text(startswith="genassign:"))
async def callback_generate_assignment(callback: CallbackQuery, teacher, **data):
    student_id = int(callback.data.split(":")[1])
    student = await crud.get_student(teacher, student_id)
    if not student:
        return await callback.answer("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    from datetime import datetime
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires) if teacher.subscription_expires else None
    except Exception:
        exp = None
    if not exp or exp < datetime.now():
        return await callback.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    current_count = student.monthly_gen_count or 0
    if current_count >= 50:
        return await callback.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.", show_alert=True)

    await callback.answer()
    await callback.message.edit_text("‚úèÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ...")

    # 1) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TeX-–∫–æ–¥–∞ –∑–∞–¥–∞–Ω–∏—è
    from services.gpt_service import generate_assignment
    tex_code = await generate_assignment(
        student,
        model=teacher.model,
        language=teacher.language or "ru",
        output_format="tex"
    )

    # 2) –ö–æ–º–ø–∏–ª—è—Ü–∏—è TeX ‚Üí PDF
    from services.storage_service import generate_tex_pdf
    file_name = f"Assignment_{student.name}_{student.surname or ''}"
    pdf_path = generate_tex_pdf(tex_code, file_name)

    # 3) –û—Ç–ø—Ä–∞–≤–∫–∞ PDF (–∏–ª–∏ —Ñ–æ–ª–ª–±–µ–∫ –Ω–∞ TeX)
    from aiogram import types
    from io import BytesIO
    try:
        await callback.message.answer_document(
            document=types.FSInputFile(pdf_path),
            caption=f"üìù –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è {student.name}"
        )
    except Exception:
        await callback.message.answer("üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å PDF, –≤–æ—Ç TeX-–∫–æ–¥:\n" + tex_code)

    # 4) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    if teacher.yandex_token:
        buffer = BytesIO(open(pdf_path, "rb").read())
        buffer.seek(0)
        await storage_service.upload_bytes_to_yandex(
            file_obj=buffer,
            teacher=teacher,
            student=student,
            category="–ö–ª–∞—Å—Å–Ω–∞—è_—Ä–∞–±–æ—Ç–∞",
            filename_base="Assignment"
        )

    # 5) –ö–Ω–æ–ø–∫–∏ —É—á–µ–Ω–∏–∫–∞
    other_inf = student.other_inf or "{}"
    try:
        info = json.loads(other_inf)
    except json.JSONDecodeError:
        info_text = other_inf    # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ JSON, –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else:
        parts = []
        if info.get("goal"):
            parts.append(f"üéØ –¶–µ–ª—å: {info['goal']}")
        if info.get("level"):
            parts.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: {info['level']}")
        if info.get("profile"):
            parts.append(f"üìù –ü—Ä–æ—Ñ–∏–ª—å: {info['profile']}")
        info_text = "\n".join(parts) or "‚Äî"

    await callback.message.answer(
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student.subject or '‚Äî'}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info_text}",
        reply_markup=student_actions_keyboard(student.students_id)
    )

    # 6) –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    new_count = await crud.increment_generation_count(teacher, student.students_id)
    if new_count == 41:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –æ—Å—Ç–∞–ª–æ—Å—å 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.",
            parse_mode="Markdown"
        )
    elif new_count == 50:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Å—è—Ü.",
            parse_mode="Markdown"
        )




@router.callback_query(Text(startswith="genhomework:"))
async def callback_generate_homework(callback: CallbackQuery, teacher, **data):
    student_id = int(callback.data.split(":")[1])
    student = await crud.get_student(teacher, student_id)
    if not student:
        return await callback.answer("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    from datetime import datetime
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires) if teacher.subscription_expires else None
    except Exception:
        exp = None
    if not exp or exp < datetime.now():
        return await callback.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    current_count = student.monthly_gen_count or 0
    if current_count >= 50:
        return await callback.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.", show_alert=True)

    await callback.answer()
    await callback.message.edit_text("üìë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ...")

    # 1) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TeX-–∫–æ–¥ –¥–æ–º–∞—à–∫–∏ —á–µ—Ä–µ–∑ GPT
    from services.gpt_service import generate_homework
    tex_code = await generate_homework(
        student,
        model=teacher.model,
        language=teacher.language or "ru",
        output_format="tex"
    )

    # 2) –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º TeX ‚Üí PDF
    from services.storage_service import generate_tex_pdf
    file_name = f"Homework_{student.name}_{student.surname or ''}"
    pdf_path = generate_tex_pdf(tex_code, file_name)

    # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF (–∏–ª–∏ —Ñ–æ–ª–ª–±–µ–∫: TeX-–∫–æ–¥)
    from aiogram import types
    from io import BytesIO
    try:
        await callback.message.answer_document(
            document=types.FSInputFile(pdf_path),
            caption=f"üìë –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è {student.name}"
        )
    except Exception:
        await callback.message.answer("üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å PDF, –≤–æ—Ç TeX-–∫–æ–¥:\n" + tex_code)

    # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    if teacher.yandex_token:
        buffer = BytesIO(open(pdf_path, "rb").read())
        buffer.seek(0)
        await storage_service.upload_bytes_to_yandex(
            file_obj=buffer,
            teacher=teacher,
            student=student,
            category="–î–æ–º–∞—à–Ω—è—è_—Ä–∞–±–æ—Ç–∞",
            filename_base="Homework"
        )

    # 5) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ–Ω–∏–∫–∞
    other_inf = student.other_inf or "{}"
    try:
        info = json.loads(other_inf)
    except json.JSONDecodeError:
        info_text = other_inf    # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ JSON, –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else:
        parts = []
        if info.get("goal"):
            parts.append(f"üéØ –¶–µ–ª—å: {info['goal']}")
        if info.get("level"):
            parts.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: {info['level']}")
        if info.get("profile"):
            parts.append(f"üìù –ü—Ä–æ—Ñ–∏–ª—å: {info['profile']}")
        info_text = "\n".join(parts) or "‚Äî"

    await callback.message.answer(
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student.subject or '‚Äî'}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info_text}",
        reply_markup=student_actions_keyboard(student.students_id)
    )
    # 6) –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á—ë—Ç—á–∏–∫–∞ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    new_count = await crud.increment_generation_count(teacher, student.students_id)
    if new_count == 41:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –æ—Å—Ç–∞–ª–æ—Å—å 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.",
            parse_mode="Markdown"
        )
    elif new_count == 50:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Å—è—Ü.",
            parse_mode="Markdown"
        )

@router.callback_query(Text(startswith="genclasswork:"))
async def callback_generate_classwork(callback: CallbackQuery, teacher, **data):
    student_id = int(callback.data.split(":")[1])
    student = await crud.get_student(teacher, student_id)
    if not student:
        return await callback.answer("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    from datetime import datetime
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires) if teacher.subscription_expires else None
    except Exception:
        exp = None
    if not exp or exp < datetime.now():
        return await callback.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    current_count = student.monthly_gen_count or 0
    if current_count >= 50:
        return await callback.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.", show_alert=True)

    await callback.answer()
    await callback.message.edit_text("üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ...")

    # 3) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TeX-–∫–æ–¥–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    from services.gpt_service import generate_classwork
    tex_code = await generate_classwork(
        student,
        model=teacher.model,
        language=teacher.language or "ru",
        output_format="tex"
    )

    # 4) –ö–æ–º–ø–∏–ª—è—Ü–∏—è TeX ‚Üí PDF
    from services.storage_service import generate_tex_pdf
    file_name = f"Classwork_{student.name}_{student.surname or ''}"
    pdf_path = generate_tex_pdf(tex_code, file_name)

    # 5) –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –∏–ª–∏ —Ñ–æ–ª–ª–±–µ–∫ –Ω–∞ TeX
    from aiogram import types
    from io import BytesIO
    try:
        await callback.message.answer_document(
            document=types.FSInputFile(pdf_path),
            caption=f"üß™ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –¥–ª—è {student.name}"
        )
    except Exception:
        await callback.message.answer("üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å PDF, –≤–æ—Ç TeX-–∫–æ–¥:\n" + tex_code)

    # 6) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    if teacher.yandex_token:
        buffer = BytesIO(open(pdf_path, "rb").read())
        buffer.seek(0)
        await storage_service.upload_bytes_to_yandex(
            file_obj=buffer,
            teacher=teacher,
            student=student,
            category="–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è_—Ä–∞–±–æ—Ç–∞",
            filename_base="Classwork"
        )

    # 7) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ–Ω–∏–∫–∞
    other_inf = student.other_inf or "{}"
    try:
        info = json.loads(other_inf)
    except json.JSONDecodeError:
        info_text = other_inf    # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ JSON, –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else:
        parts = []
        if info.get("goal"):
            parts.append(f"üéØ –¶–µ–ª—å: {info['goal']}")
        if info.get("level"):
            parts.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: {info['level']}")
        if info.get("profile"):
            parts.append(f"üìù –ü—Ä–æ—Ñ–∏–ª—å: {info['profile']}")
        info_text = "\n".join(parts) or "‚Äî"

    await callback.message.answer(
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student.subject or '‚Äî'}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info_text}",
        reply_markup=student_actions_keyboard(student.students_id)
    )

    # 8) –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á—ë—Ç—á–∏–∫–∞ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    new_count = await crud.increment_generation_count(teacher, student.students_id)
    if new_count == 41:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –æ—Å—Ç–∞–ª–æ—Å—å 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.",
            parse_mode="Markdown"
        )
    elif new_count == 50:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Å—è—Ü.",
            parse_mode="Markdown"
        )


@router.callback_query(Text(startswith="genmaterials:"))
async def callback_generate_materials(callback: CallbackQuery, teacher, **data):
    student_id = int(callback.data.split(":")[1])
    student = await crud.get_student(teacher, student_id)
    if not student:
        return await callback.answer("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    from datetime import datetime
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires) if teacher.subscription_expires else None
    except Exception:
        exp = None
    if not exp or exp < datetime.now():
        return await callback.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    current_count = student.monthly_gen_count or 0
    if current_count >= 50:
        return await callback.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.", show_alert=True)

    await callback.answer()
    await callback.message.edit_text("üìö –ü–æ–¥–±–æ—Ä –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ...")

    # 3) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TeX-–∫–æ–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    from services.gpt_service import generate_learning_materials
    tex_code = await generate_learning_materials(
        student,
        model=teacher.model,
        language=teacher.language or "ru",
        output_format="tex"
    )

    # 4) –ö–æ–º–ø–∏–ª—è—Ü–∏—è TeX ‚Üí PDF
    from services.storage_service import generate_tex_pdf
    file_name = f"Materials_{student.name}_{student.surname or ''}"
    pdf_path = generate_tex_pdf(tex_code, file_name)

    # 5) –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –∏–ª–∏ —Ñ–æ–ª–ª–±–µ–∫ –Ω–∞ TeX
    from aiogram import types
    from io import BytesIO
    try:
        await callback.message.answer_document(
            document=types.FSInputFile(pdf_path),
            caption=f"üìö –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è {student.name}"
        )
    except Exception:
        await callback.message.answer("üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å PDF, –≤–æ—Ç TeX-–∫–æ–¥:\n" + tex_code)

    # 6) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    if teacher.yandex_token:
        buffer = BytesIO(open(pdf_path, "rb").read())
        buffer.seek(0)
        await storage_service.upload_bytes_to_yandex(
            file_obj=buffer,
            teacher=teacher,
            student=student,
            category="–û–±—É—á–∞—é—â–∏–µ_–º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            filename_base="Materials"
        )

    # 7) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ–Ω–∏–∫–∞
    other_inf = student.other_inf or "{}"
    try:
        info = json.loads(other_inf)
    except json.JSONDecodeError:
        info_text = other_inf    # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ JSON, –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else:
        parts = []
        if info.get("goal"):
            parts.append(f"üéØ –¶–µ–ª—å: {info['goal']}")
        if info.get("level"):
            parts.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: {info['level']}")
        if info.get("profile"):
            parts.append(f"üìù –ü—Ä–æ—Ñ–∏–ª—å: {info['profile']}")
        info_text = "\n".join(parts) or "‚Äî"

    await callback.message.answer(
        f"üë§ {student.name} {student.surname or ''}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student.subject or '‚Äî'}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info_text}",
        reply_markup=student_actions_keyboard(student.students_id)
    )

    # 8) –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á—ë—Ç—á–∏–∫–∞ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    new_count = await crud.increment_generation_count(teacher, student.students_id)
    if new_count == 41:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –æ—Å—Ç–∞–ª–æ—Å—å 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.",
            parse_mode="Markdown"
        )
    elif new_count == 50:
        await callback.message.answer(
            f"‚ö†Ô∏è –î–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.name}* –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Å—è—Ü.",
            parse_mode="Markdown"
        )
