from aiogram import Router
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from keyboards.main_menu import main_menu_kb
from database.db import async_session
from keyboards.teachers import (
    teacher_profile_keyboard,
    edit_teacher_field_keyboard,
    settings_menu_keyboard
)
import database.crud as crud
from states.auth_state import TeacherStates
from database.models import Teacher

from aiogram import F
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select


router = Router()

# üìå –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.message(Text(text=["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]))
async def menu_settings(message: Message, **data):
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_menu_keyboard())

# ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π
@router.callback_query(Text("edit_profile"))
async def callback_edit_profile(callback: CallbackQuery):
    await callback.answer()
    try:
        await callback.message.edit_text("‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=edit_teacher_field_keyboard())
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise


# –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(Text(startswith="edit_teacher_field:"))
async def callback_select_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split(":")[1]
    await state.set_state(TeacherStates.editing_field)
    await state.update_data(edit_field=field)
    await callback.answer()
    await callback.message.edit_text(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: *{field}*", parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@router.message(TeacherStates.editing_field)
async def process_edit_field(message: Message, state: FSMContext, teacher):
    state_data = await state.get_data()
    field = state_data.get("edit_field")
    if not field:
        return
    new_value = message.text.strip()
    await crud.update_teacher_field(teacher, field, new_value)
    await state.clear()
    await message.answer(f"‚úÖ –ü–æ–ª–µ *{field}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", parse_mode="Markdown")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    profile_text = (
        f"üë§ {teacher.surname or ''} {teacher.name or ''} {teacher.patronymic or ''}\n"
        f"üóìÔ∏è –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {teacher.birth_date or '‚Äî'}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {teacher.phone or '‚Äî'}\n"
        f"üìß Email: {teacher.email or '‚Äî'}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç—ã: {teacher.subjects or '‚Äî'}\n"
        f"üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {teacher.occupation or '‚Äî'}\n"
        f"üè¢ –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: {teacher.workplace or '‚Äî'}"
    )
    await message.answer(profile_text, reply_markup=teacher_profile_keyboard())


# üîô –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
@router.callback_query(Text("back_to_settings"))
async def back_to_settings(callback: CallbackQuery):
    await callback.answer()
    try:
        await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_menu_keyboard())
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise


class YandexDiskStates(StatesGroup):
    waiting_for_token = State()


@router.callback_query(F.data == "link_yandex_disk")
async def start_yandex_token_input(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    instructions = (
        "üîê *–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞*\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç—É–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –ø–æ–ª—É—á–∏—Ç—å OAuth —Ç–æ–∫–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ –Ø–Ω–¥–µ–∫—Å–∞:\n"
        "üîó https://yandex.ru/dev/disk/poligon/ \n"
        "–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ.\n"
        "–ù–∞–∂–º–∏ –ü–æ–ª—É—á–∏—Ç—å OAuth-—Ç–æ–∫–µ–Ω\n"
        "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –ø–æ–¥ —Å–≤–æ–µ–π —É—á—ë—Ç–∫–æ–π.\n"
        "–°–∫–æ–ø–∏—Ä—É–π —Ç–æ–∫–µ–Ω ‚Äî –∏ –≤—Å—Ç–∞–≤—å –≤ –±–æ—Ç–∞\n"
        "‚ö†Ô∏è –¢–∞–∫–æ–π —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ –µ–≥–æ –æ—Ç–∑—ã–≤–∞ –≤—Ä—É—á–Ω—É—é.\n"
    )

    await callback.message.answer(instructions, parse_mode="Markdown", disable_web_page_preview=True)
    await state.set_state(YandexDiskStates.waiting_for_token)


@router.message(YandexDiskStates.waiting_for_token)
async def save_yandex_token(message: Message, state: FSMContext, **data):
    teacher = data.get("teacher")
    token = message.text.strip()

    async with async_session() as session:
        result = await session.execute(select(Teacher).where(Teacher.telegram_id == teacher.telegram_id))
        db_teacher = result.scalar_one_or_none()

        if db_teacher:
            db_teacher.yandex_token = token
            await session.commit()
            await message.answer("‚úÖ –¢–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        else:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞.")

    await state.clear()


from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext


# üóë –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
@router.callback_query(Text("delete_account"))
async def callback_delete_account(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞."""
    await callback.answer()
    confirm_kb = Message.reply_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_account")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_settings")]
    ])
    await callback.message.edit_text(
        "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=confirm_kb
    )

@router.callback_query(Text("confirm_delete_account"))
async def callback_confirm_delete_account(callback: CallbackQuery, teacher):
    """–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    await crud.delete_teacher(teacher.teacher_id)
    await callback.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω.", show_alert=True)
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.message.edit_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!")