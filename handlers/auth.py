from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import database.crud as crud
from keyboards.main_menu import get_main_menu
from states.auth_state import AuthStates, TeacherProfileStates
from utils.security import hash_password, check_password
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç *AI For Tutors* ‚Äì –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤.\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ –±–∞–∑—É —É—á–µ–Ω–∏–∫–æ–≤, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ø–æ–º–æ—â—å—é GPT.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ /login –¥–ª—è –≤—Ö–æ–¥–∞.",
        parse_mode="Markdown"
    )


async def prompt_connect_yadisk(chat_id: int, bot: Bot, language: str = "ru"):
    text = (
        "üöÄ <b>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫</b>\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞–¥—ë–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º:\n"
        "‚Ä¢ üìÅ <b>–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ</b> –≤–∞—à–∏—Ö PDF-–ø–ª–∞–Ω–æ–≤, —Ç–µ—Å—Ç–æ–≤ –∏ –æ—Ç—á—ë—Ç–æ–≤\n"
        "‚Ä¢ üì≤ –î–æ—Å—Ç—É–ø <b>–∏–∑ –ª—é–±–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</b> –ø–æ —Å—Å—ã–ª–∫–µ\n"
        "‚Ä¢ üîó –õ—ë–≥–∫–∏–π –æ–±–º–µ–Ω –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n"
        "‚Ä¢ ‚òÅÔ∏è –≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞ –≤ —á–∞—Ç–µ ‚Äî —Ñ–∞–π–ª—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ–±–ª–∞–∫–µ, –∞ –Ω–µ –≤ Telegram\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ –Ω–∞—á–∞—Ç—å."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [ InlineKeyboardButton(
            text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫",
            callback_data="link_yandex_disk"        # <-- –∑–¥–µ—Å—å
        ) ]
    ])
    await bot.send_message(chat_id, text, reply_markup=kb, parse_mode="HTML")

# ‚îÄ‚îÄ‚îÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.message(Command("register"))
async def cmd_register(message: types.Message, state: FSMContext):
    await state.set_state(AuthStates.register_login)
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")


@router.message(AuthStates.register_login)
async def process_register_login(message: types.Message, state: FSMContext):
    username = message.text.strip()
    if await crud.get_teacher_by_login(username):
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
        return
    await state.update_data(login=username)
    await state.set_state(AuthStates.register_password)
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")


@router.message(AuthStates.register_password)
async def process_register_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    data = await state.get_data()
    login = data["login"]
    password_hash = hash_password(password)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ Telegram
    if await crud.get_teacher_by_telegram_id(message.from_user.id):
        await message.answer(
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç—Ç–∏–º Telegram.\n"
            "–ï—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –ª–æ–≥–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞."
        )
        await state.clear()
        return

    try:
        teacher = await crud.create_teacher(
            login=login,
            password_hash=password_hash,
            telegram_id=message.from_user.id
        )
    except Exception:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    await state.update_data(teacher_id=teacher.teacher_id)
    await state.set_state(TeacherProfileStates.surname)
    await message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n"
        "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",
        parse_mode="Markdown"
    )


# ‚îÄ‚îÄ‚îÄ –ê–Ω–∫–µ—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.message(TeacherProfileStates.surname)
async def enter_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text.strip())
    await state.set_state(TeacherProfileStates.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")


@router.message(TeacherProfileStates.name)
async def enter_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(TeacherProfileStates.patronymic)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–µ—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'):")


@router.message(TeacherProfileStates.patronymic)
async def enter_patronymic(message: types.Message, state: FSMContext):
    await state.update_data(patronymic=message.text.strip())
    await state.set_state(TeacherProfileStates.birth_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 24.12.1843):")


@router.message(TeacherProfileStates.birth_date)
async def enter_birth_date(message: types.Message, state: FSMContext):
    await state.update_data(birth_date=message.text.strip())
    await state.set_state(TeacherProfileStates.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: +7 ):")


@router.message(TeacherProfileStates.phone)
async def enter_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    await state.set_state(TeacherProfileStates.email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")


@router.message(TeacherProfileStates.email)
async def enter_email(
    message: types.Message,
    state: FSMContext,
    bot: Bot,
):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    await state.update_data(email=message.text.strip())
    data = await state.get_data()
    teacher = await crud.get_teacher_by_id(data["teacher_id"])
    if not teacher:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
        await state.clear()
        return

    teacher.surname    = data["surname"]
    teacher.name       = data["name"]
    teacher.patronymic = data.get("patronymic", "")
    teacher.birth_date = data["birth_date"]
    teacher.phone      = data["phone"]
    teacher.email      = data["email"]
    await crud.update_teacher(teacher)
    await state.clear()

    # 1) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

    # 2) –ï—Å–ª–∏ –Ø.–î–∏—Å–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å
    if not teacher.yandex_token:
        await prompt_connect_yadisk(message.chat.id, bot, teacher.language)

    # 3) –ó–∞—Ç–µ–º ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ GPT
    models_kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å", callback_data="choose_model:gpt-4.1-mini"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–°–∞–º–∞—è —Å–∏–ª—å–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å", callback_data="choose_model:o4-mini"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ë–æ–ª–µ–µ —Å–ª–∞–±–∞—è –º–æ–¥–µ–ª—å", callback_data="choose_model:gpt-4o-mini"
                )
            ]

    ])
    await message.answer(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GPT –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=models_kb
    )


# ‚îÄ‚îÄ‚îÄ –í—Ö–æ–¥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.message(Command("login"))
async def cmd_login(message: types.Message, state: FSMContext):
    await state.set_state(AuthStates.login_username)
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")


@router.message(AuthStates.login_username)
async def process_login_username(message: types.Message, state: FSMContext):
    login = message.text.strip()
    teacher = await crud.get_teacher_by_login(login)
    if not teacher:
        await message.answer(
            "‚ö†Ô∏è –õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
        )
        return
    await state.update_data(login=login)
    await state.set_state(AuthStates.login_password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")


@router.message(AuthStates.login_password)
async def process_login_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    teacher = await crud.get_teacher_by_login(data["login"])
    if not teacher or not check_password(message.text.strip(), teacher.password_hash):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
        await state.clear()
        return

    teacher.telegram_id = message.from_user.id
    await crud.update_teacher(teacher)
    await state.clear()

    await message.answer(
        f"‚úÖ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {teacher.name}!",
        reply_markup=get_main_menu(teacher.language)
    )