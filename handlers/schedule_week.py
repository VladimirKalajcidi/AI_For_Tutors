from aiogram import Router, types
from aiogram.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from database import crud
from states.schedule_states import ScheduleStates
import utils.helpers as helpers

router = Router()

def weekly_schedule_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data="add_lesson_from_week")]
    ])

@router.message(Text(text=["üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏", "üìÜ Weekly Schedule"]))
async def weekly_schedule_view(message: types.Message, **data):
    teacher = data.get("teacher")
    now = datetime.now()
    start_of_week = now - timedelta(days=now.weekday())
    end_of_week = start_of_week + timedelta(days=7)

    lessons = await crud.get_lessons_for_teacher(
        teacher_id=teacher.teacher_id,
        start=start_of_week,
        end=end_of_week
    )

    if not lessons:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.", reply_markup=weekly_schedule_kb())
        return

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
    day_map = {}
    for lesson in lessons:
        day_key = datetime.strptime(lesson.data_of_lesson, "%Y-%m-%d %H:%M").date()
        if day_key not in day_map:
            day_map[day_key] = []
        day_map[day_key].append(lesson)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    sorted_days = sorted(day_map.keys())
    text = f"üóì –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
    for day in sorted_days:
        text += f"{day.strftime('%A, %d.%m')}\n"
        for lesson in sorted(day_map[day], key=lambda l: l.data_of_lesson):
            student = await crud.get_student(teacher, lesson.students_id)
            start_time = datetime.strptime(lesson.data_of_lesson, "%Y-%m-%d %H:%M").strftime("%H:%M")
            end_time = datetime.strptime(lesson.end_time, "%Y-%m-%d %H:%M").strftime("%H:%M")
            student_name = f"{student.name} {student.surname}" if student else "(—É—á–µ–Ω–∏–∫ —É–¥–∞–ª—ë–Ω)"
            subject = student.subject if student else ""
            text += f"‚ñ™Ô∏è {start_time}‚Äì{end_time} ‚Äî {student_name} ({subject})\n"
        text += "\n"

    await message.answer(text, reply_markup=weekly_schedule_kb())

@router.callback_query(Text("add_lesson_from_week"))
async def handle_add_lesson_from_week(callback: types.CallbackQuery, state: FSMContext, **data):
    teacher = data.get("teacher")
    students = await crud.list_students(teacher)
    if not students:
        await callback.message.answer("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—á–µ–Ω–∏–∫–∞.")
        return

    await callback.answer()
    await state.set_state(ScheduleStates.choose_student)
    await state.update_data(students=[(s.students_id, f"{s.name} {s.surname}") for s in students])

    text = "üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É—Ä–æ–∫–∞:\n"
    for idx, stud in enumerate(students, start=1):
        text += f"{idx}. {stud.name} {stud.surname} ({stud.subject})\n"
    text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞:"
    await callback.message.answer(text)
