from aiogram import Router, types
from aiogram.filters import Text, Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

import database.crud as crud
from states.schedule_states import ScheduleStates
import utils.helpers as helpers
from keyboards.schedule import lesson_action_kb

router = Router()

@router.message(Text(text=["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üìÖ Schedule"]))
async def menu_schedule(message: types.Message, teacher):
    lessons = await crud.list_upcoming_lessons(teacher)
    if not lessons:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.")
        return

    text = "üóì –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é:\n"
    for les in lessons:
        start_str = helpers.format_datetime(les.data_of_lesson, teacher.language)
        end_str = helpers.format_datetime(les.end_time, teacher.language)
        student = await crud.get_student(teacher, les.students_id)
        student_name = f"{student.name} {student.surname}" if student else "(—É—á–µ–Ω–∏–∫ —É–¥–∞–ª—ë–Ω)"
        subject = student.subject if student else ""
        text += f"\nüìö {start_str} ‚Äì {end_str} | {student_name} ({subject})"
    await message.answer(text)


@router.message(Command("add_lesson"))
async def cmd_add_lesson(message: types.Message, state: FSMContext, teacher):
    students = await crud.list_students(teacher)
    if not students:
        await message.answer("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—á–µ–Ω–∏–∫–∞.")
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É—Ä–æ–∫–∞:\n"
    for idx, stud in enumerate(students, start=1):
        text += f"{idx}. {stud.name} {stud.surname} ({stud.subject})\n"
    text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞:"

    await state.set_state(ScheduleStates.choose_student)
    await state.update_data(students=[(stud.students_id, f"{stud.name} {stud.surname}") for stud in students])
    await message.answer(text)


@router.message(ScheduleStates.choose_student)
async def lesson_choose_student(message: types.Message, state: FSMContext, teacher):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞.")
        return
    choice = int(message.text)
    data = await state.get_data()
    students_list = data.get("students", [])
    if choice < 1 or choice > len(students_list):
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(students_list)}.")
        return
    student_id = students_list[choice - 1][0]
    await state.update_data(student_id=student_id)
    await state.set_state(ScheduleStates.enter_datetime)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –í–†–ï–ú–Ø –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:")


@router.message(ScheduleStates.enter_datetime)
async def lesson_enter_datetime(message: types.Message, state: FSMContext, teacher):
    try:
        start_time = datetime.fromisoformat(message.text.strip())
        await state.update_data(start_time=start_time)
        await state.set_state(ScheduleStates.enter_endtime)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–†–ï–ú–Ø –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:30):")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM")


@router.message(ScheduleStates.enter_endtime)
async def lesson_enter_endtime(message: types.Message, state: FSMContext, teacher):
    data = await state.get_data()
    start_time = data.get("start_time")
    try:
        hour, minute = map(int, message.text.strip().split(":"))
        end_time = start_time.replace(hour=hour, minute=minute)
        if end_time <= start_time:
            raise ValueError("End must be after start")
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:30)")
        return

    student_id = data.get("student_id")
    student = await crud.get_student(teacher, student_id)
    lesson = await crud.create_lesson(teacher, student, student.subject, start_time, end_time)

    start_str = helpers.format_datetime(start_time, teacher.language)
    end_str = helpers.format_datetime(end_time, teacher.language)
    await message.answer(f"‚úÖ –£—Ä–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω: {start_str} ‚Äì {end_str} —Å —É—á–µ–Ω–∏–∫–æ–º {student.name}")
    await state.clear()
