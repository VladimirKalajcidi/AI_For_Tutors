from aiogram import Router, types
from aiogram.filters import Text, Command
from aiogram.fsm.context import FSMContext
from datetime import date, timedelta, datetime

import database.crud as crud
from states.schedule_states import ScheduleStates
import utils.helpers as helpers

router = Router()

@router.message(Text(text=["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üìÖ Schedule"]))
async def menu_schedule(message: types.Message, teacher):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    now = datetime.now()
    try:
        exp = datetime.fromisoformat(teacher.subscription_expires) if teacher.subscription_expires else None
    except Exception:
        exp = None
    if not exp or exp < now:
        await message.answer("üîí –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        return

    # –ë–µ—Ä—ë–º –≤—Å–µ –±—É–¥—É—â–∏–µ —É—Ä–æ–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±–ª–∏–∂–∞–π—à–µ–π –Ω–µ–¥–µ–ª–µ
    today      = date.today()
    week_later = today + timedelta(days=7)
    lessons    = await crud.list_upcoming_lessons_for_teacher(teacher.teacher_id)
    lessons    = [les for les in lessons
                  if today <= les.data_of_lesson <= week_later]

    if not lessons:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.")
        return

    text = "üóì –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é:\n"
    for les in lessons:
        dt_start = datetime.combine(les.data_of_lesson, les.start_time)
        dt_end   = datetime.combine(les.data_of_lesson, les.end_time)
        start_str = helpers.format_datetime(dt_start, teacher.language)
        end_str   = helpers.format_datetime(dt_end,   teacher.language)

        student = await crud.get_student(teacher, les.students_id)
        name    = f"{student.name} {student.surname}" if student else "(—É—á–µ–Ω–∏–∫ —É–¥–∞–ª—ë–Ω)"
        subj    = student.subject if student else ""
        text   += f"\nüìö {start_str} ‚Äì {end_str} | {name} ({subj})"

    await message.answer(text)


@router.message(Command("add_lesson"))
async def cmd_add_lesson(message: types.Message, state: FSMContext, teacher):
    students = await crud.list_students(teacher)
    if not students:
        await message.answer("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—á–µ–Ω–∏–∫–∞.")
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É—Ä–æ–∫–∞:\n"
    for idx, stud in enumerate(students, start=1):
        text += f"{idx}. {stud.name} {stud.surname} ({stud.subject})\n"
    text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞:"

    await state.set_state(ScheduleStates.choose_student)
    await state.update_data(students=[
        (stud.students_id, f"{stud.name} {stud.surname}") for stud in students
    ])
    await message.answer(text)


@router.message(ScheduleStates.choose_student)
async def lesson_choose_student(message: types.Message, state: FSMContext, teacher):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞.")
        return
    choice = int(message.text)
    data   = await state.get_data()
    roster = data.get("students", [])
    if choice < 1 or choice > len(roster):
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(roster)}.")
        return

    student_id = roster[choice - 1][0]
    await state.update_data(student_id=student_id)
    await state.set_state(ScheduleStates.enter_datetime)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:")


@router.message(ScheduleStates.enter_datetime)
async def lesson_enter_datetime(message: types.Message, state: FSMContext, teacher):
    try:
        start_dt = datetime.fromisoformat(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM")
        return

    await state.update_data(start_dt=start_dt)
    await state.set_state(ScheduleStates.enter_endtime)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")


@router.message(ScheduleStates.enter_endtime)
async def lesson_enter_endtime(message: types.Message, state: FSMContext, teacher):
    data     = await state.get_data()
    start_dt = data.get("start_dt")
    try:
        hour, minute = map(int, message.text.strip().split(":"))
        end_dt = start_dt.replace(hour=hour, minute=minute)
        if end_dt <= start_dt:
            raise ValueError
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:30)")
        return

    student = await crud.get_student(teacher, data["student_id"])
    # —Å–æ–∑–¥–∞—ë–º —É—Ä–æ–∫ (passed=False –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    lesson = await crud.create_lesson(
        teacher=teacher,
        student=student,
        start_dt=start_dt,
        end_dt=end_dt
    )

    start_str = helpers.format_datetime(start_dt, teacher.language)
    end_str   = helpers.format_datetime(end_dt,   teacher.language)
    await message.answer(f"‚úÖ –£—Ä–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω: {start_str} ‚Äì {end_str} —Å —É—á–µ–Ω–∏–∫–æ–º {student.name}")
    await state.clear()
