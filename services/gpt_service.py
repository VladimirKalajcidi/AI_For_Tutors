'''from openai import AsyncOpenAI
import config
import json

client = AsyncOpenAI(api_key=config.OPENAI_API_KEY)


async def generate_study_plan(student, language="en"):
    subject_name = student.subject or "–ø—Ä–µ–¥–º–µ—Ç"
    try:
        extra = json.loads(student.other_inf or "{}")
        profile_info = extra.get("profile") or f"{extra.get('goal', '')}, —É—Ä–æ–≤–µ–Ω—å: {extra.get('level', '')}"
    except Exception:
        profile_info = student.other_inf or ""

    if language == "ru":
        prompt = f"–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name} –¥–ª—è —É—á–µ–Ω–∏–∫–∞."
        if profile_info:
            prompt += f" –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–µ–Ω–∏–∫–µ: {profile_info}."
        prompt += " –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º—ã –ø–æ –∑–∞–Ω—è—Ç–∏—è–º –∏ —É–∫–∞–∂–∏ —Ü–µ–ª–∏ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞."
    else:
        prompt = f"Create a detailed study plan for {subject_name} for a student."
        if profile_info:
            prompt += f" Student info: {profile_info}."
        prompt += " Outline topics by session and state the objectives for each stage."

    response = await client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
        max_tokens=1024
    )
    return response.choices[0].message.content.strip()


async def generate_assignment(student, topic=None, num_questions=5, language="en"):
    subject_name = student.subject or "–ø—Ä–µ–¥–º–µ—Ç"
    if language == "ru":
        prompt = f"–°–æ—Å—Ç–∞–≤—å {num_questions} –∑–∞–¥–∞—á –ø–æ —Ç–µ–º–µ {topic or subject_name} –¥–ª—è —É—á–µ–Ω–∏–∫–∞. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç—ã."
    else:
        prompt = f"Create {num_questions} practice questions for the topic {topic or subject_name}. Provide the questions first, then the answers."

    response = await client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
        max_tokens=1024
    )
    content = response.choices[0].message.content.strip()
    parts = content.split("\n\n")
    if len(parts) >= 2:
        questions = parts[0]
        answers = "\n\n".join(parts[1:])
    else:
        questions = content
        answers = ""
    return questions, answers'''

'''
import httpx
import json
import config  # –ø–æ–ª–æ–∂–∏ —Å–≤–æ–π OpenRouter API-–∫–ª—é—á –≤ config.OPENROUTER_API_KEY

OPENROUTER_API_KEY = "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"

OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
OPENROUTER_MODEL = "openai/gpt-3.5-turbo"  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "openai/gpt-4o" –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π

HEADERS = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "HTTP-Referer": "ai-for-tutors",  # –ª—é–±–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–µ url
    "X-Title": "AI for Tutors"
}


async def generate_study_plan(student, language="ru"):
    subject_name = student.subject or "–ø—Ä–µ–¥–º–µ—Ç"
    try:
        extra = json.loads(student.other_inf or "{}")
        profile_info = extra.get("profile") or f"{extra.get('goal', '')}, —É—Ä–æ–≤–µ–Ω—å: {extra.get('level', '')}"
    except Exception:
        profile_info = student.other_inf or ""

    if language == "ru":
        prompt = f"–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name} –¥–ª—è —É—á–µ–Ω–∏–∫–∞."
        if profile_info:
            prompt += f" –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–µ–Ω–∏–∫–µ: {profile_info}."
        prompt += " –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º—ã –ø–æ –∑–∞–Ω—è—Ç–∏—è–º –∏ —É–∫–∞–∂–∏ —Ü–µ–ª–∏ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞."
    else:
        prompt = f"Create a detailed study plan for {subject_name} for a student."
        if profile_info:
            prompt += f" Student info: {profile_info}."
        prompt += " Outline topics by session and state the objectives for each stage."

    json_data = {
        "model": OPENROUTER_MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7,
        "max_tokens": 1024
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(OPENROUTER_API_URL, headers=HEADERS, json=json_data)
        result = response.json()
        print("üß† OpenRouter –æ—Ç–≤–µ—Ç:", result)

        if "choices" in result and result["choices"]:
            return result["choices"][0]["message"]["content"].strip()
        else:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω (OpenRouter –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª)."

async def generate_assignment(student, topic=None, num_questions=5, language="ru"):
    subject_name = student.subject or "–ø—Ä–µ–¥–º–µ—Ç"
    if language == "ru":
        prompt = f"–°–æ—Å—Ç–∞–≤—å {num_questions} –∑–∞–¥–∞—á –ø–æ —Ç–µ–º–µ {topic or subject_name} –¥–ª—è —É—á–µ–Ω–∏–∫–∞. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç—ã."
    else:
        prompt = f"Create {num_questions} practice questions for the topic {topic or subject_name}. Provide the questions first, then the answers."

    json_data = {
        "model": OPENROUTER_MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7,
        "max_tokens": 1024
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(OPENROUTER_API_URL, headers=HEADERS, json=json_data)
        result = response.json()
        if "choices" in result and result["choices"]:
            content = result["choices"][0]["message"]["content"].strip()
            parts = content.split("\n\n")
            if len(parts) >= 2:
                questions = parts[0]
                answers = "\n\n".join(parts[1:])
            else:
                questions = content
                answers = ""
            return questions, answers
        else:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ (OpenRouter –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª).", ""
'''


import time
import httpx
import json
import config

API_URL = "https://api.proxyapi.ru/openai/v1/chat/completions"
API_KEY = config.PROXYAPI_KEY
MODEL = "gpt-4.1"

HEADERS = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

async def generate_study_plan(student, language="ru"):
    subject_name = student.subject or "–ø—Ä–µ–¥–º–µ—Ç"
    try:
        extra = json.loads(student.other_inf or "{}")
        profile_info = extra.get("profile") or f"{extra.get('goal', '')}, —É—Ä–æ–≤–µ–Ω—å: {extra.get('level', '')}"
    except Exception:
        profile_info = student.other_inf or ""

    if language == "ru":
        prompt = f"–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name} –¥–ª—è —É—á–µ–Ω–∏–∫–∞. "
        if profile_info:
            prompt += f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–µ–Ω–∏–∫–µ: {profile_info}. "
        prompt += "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º—ã –ø–æ –∑–∞–Ω—è—Ç–∏—è–º –∏ —É–∫–∞–∂–∏ —Ü–µ–ª–∏ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞."
    else:
        prompt = f"Create a detailed study plan for {subject_name} for a student. "
        if profile_info:
            prompt += f"Student info: {profile_info}. "
        prompt += "Outline topics by session and state the objectives for each stage."

    json_data = {
        "model": MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "max_completion_tokens": 4000  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–º–µ—Å—Ç–æ max_tokens
    }

    try:
        start_time = time.time()
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(API_URL, headers=HEADERS, json=json_data)
        duration = time.time() - start_time

        print(f"üß† proxyapi.ru –æ—Ç–≤–µ—Ç –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥: {response.status_code}")
        print(response.text)

        if response.status_code != 200:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status_code}: {response.text}"

        try:
            result = response.json()
        except Exception as e:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}"

        if "choices" in result and result["choices"]:
            return result["choices"][0]["message"]["content"].strip()
        else:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω (–æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π)."
    except httpx.ReadTimeout:
        return "‚è± –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç proxyapi. –ó–∞–ø—Ä–æ—Å –º–æ–≥ –±—ã—Ç—å –ø–ª–∞—Ç–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {e}"

async def generate_homework(student, topic: str = "", language="ru"):
    subject_name = student.subject or "–ø—Ä–µ–¥–º–µ—Ç"
    try:
        extra = json.loads(student.other_inf or "{}")
        profile_info = extra.get("profile") or f"{extra.get('goal', '')}, —É—Ä–æ–≤–µ–Ω—å: {extra.get('level', '')}"
    except Exception:
        profile_info = student.other_inf or ""

    if language == "ru":
        prompt = f"–°–æ—Å—Ç–∞–≤—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name}."
        if topic:
            prompt += f" –¢–µ–º–∞ —É—Ä–æ–∫–∞: {topic}."
        if profile_info:
            prompt += f" –î–∞–Ω–Ω—ã–µ –æ–± —É—á–µ–Ω–∏–∫–µ: {profile_info}."
        prompt += " –ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑–Ω–æ–ø–ª–∞–Ω–æ–≤—ã–º: —Ç–µ–æ—Ä–∏—è, –ø—Ä–∞–∫—Ç–∏–∫–∞, –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç."
    else:
        prompt = f"Create homework for the subject {subject_name}."
        if topic:
            prompt += f" Topic: {topic}."
        if profile_info:
            prompt += f" Student info: {profile_info}."
        prompt += " Include theoretical, practical and creative tasks."

    json_data = {
        "model": MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "max_completion_tokens": 3000
    }

    return await send_proxyapi_request(json_data)

async def generate_classwork(student, topic: str = "", language="ru"):
    subject_name = student.subject or "–ø—Ä–µ–¥–º–µ—Ç"
    try:
        extra = json.loads(student.other_inf or "{}")
        profile_info = extra.get("profile") or f"{extra.get('goal', '')}, —É—Ä–æ–≤–µ–Ω—å: {extra.get('level', '')}"
    except Exception:
        profile_info = student.other_inf or ""

    if language == "ru":
        prompt = f"–°–æ—Å—Ç–∞–≤—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name}."
        if topic:
            prompt += f" –¢–µ–º–∞: {topic}."
        if profile_info:
            prompt += f" –£—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞: {profile_info}."
        prompt += " –í–∫–ª—é—á–∏ –∑–∞–¥–∞–Ω–∏—è —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —É–∫–∞–∂–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏."
    else:
        prompt = f"Create a test for {subject_name}."
        if topic:
            prompt += f" Topic: {topic}."
        if profile_info:
            prompt += f" Student profile: {profile_info}."
        prompt += " Include questions of various difficulty levels and specify assessment criteria."

    json_data = {
        "model": MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "max_completion_tokens": 3000
    }

    return await send_proxyapi_request(json_data)


async def generate_learning_materials(student, topic: str = "", language="ru"):
    subject_name = student.subject or "–ø—Ä–µ–¥–º–µ—Ç"
    try:
        extra = json.loads(student.other_inf or "{}")
        profile_info = extra.get("profile") or f"{extra.get('goal', '')}, —É—Ä–æ–≤–µ–Ω—å: {extra.get('level', '')}"
    except Exception:
        profile_info = student.other_inf or ""

    if language == "ru":
        prompt = f"–ü–æ–¥–±–µ—Ä–∏ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (—Å—Ç–∞—Ç—å–∏, –≤–∏–¥–µ–æ, —Å–∞–π—Ç—ã, PDF) –ø–æ —Ç–µ–º–µ {topic} –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name}."
        if profile_info:
            prompt += f" –£—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞: {profile_info}."
        prompt += " –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ."
    else:
        prompt = f"Find study materials (articles, videos, websites, PDFs) for the topic {topic} in {subject_name}."
        if profile_info:
            prompt += f" Student level: {profile_info}."
        prompt += " Include links if possible."

    json_data = {
        "model": MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "max_completion_tokens": 2500
    }

    return await send_proxyapi_request(json_data)


async def send_proxyapi_request(json_data):
    try:
        start_time = time.time()
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(API_URL, headers=HEADERS, json=json_data)
        duration = time.time() - start_time

        print(f"üß† –û—Ç–≤–µ—Ç proxyapi –∑–∞ {duration:.2f} —Å–µ–∫: {response.status_code}")
        print(response.text)

        if response.status_code != 200:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status_code}: {response.text}"

        result = response.json()

        if "choices" in result and result["choices"]:
            return result["choices"][0]["message"]["content"].strip()
        else:
            return "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
    except httpx.ReadTimeout:
        return "‚è± –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"

# services/gpt_service.py

async def generate_assignment(student, language="ru"):
    subject_name = student.subject or "–ø—Ä–µ–¥–º–µ—Ç"
    try:
        extra = json.loads(student.other_inf or "{}")
        profile_info = extra.get("profile") or f"{extra.get('goal', '')}, —É—Ä–æ–≤–µ–Ω—å: {extra.get('level', '')}"
    except Exception:
        profile_info = student.other_inf or ""

    if language == "ru":
        prompt = f"–°–æ—Å—Ç–∞–≤—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name} –¥–ª—è —É—á–µ–Ω–∏–∫–∞."
        if profile_info:
            prompt += f" –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–µ–Ω–∏–∫–µ: {profile_info}. "
        prompt += "–ó–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –≤–∫–ª—é—á–∞—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç—å –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è."
    else:
        prompt = f"Create assignments for the subject {subject_name} for the student."
        if profile_info:
            prompt += f" Student info: {profile_info}. "
        prompt += "The assignments should include theoretical and practical exercises."

    json_data = {
        "model": MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "max_completion_tokens": 3000
    }

    return await send_proxyapi_request(json_data)
