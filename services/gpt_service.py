import time
import httpx
import json
from config import PROXYAPI_KEY
from services.storage_service import list_student_materials_by_name

API_URL = "https://api.proxyapi.ru/openai/v1/chat/completions"
MODEL = "gpt-4.1"
HEADERS = {
    "Authorization": f"Bearer {PROXYAPI_KEY}",
    "Content-Type": "application/json"
}


async def generate_study_plan(student, language="ru"):
    name = student.name
    subject_name = student.subject or "–ø—Ä–µ–¥–º–µ—Ç"
    try:
        extra = json.loads(student.other_inf or "{}")
        profile_info = extra.get("profile") or f"{extra.get('goal', '')}, —É—Ä–æ–≤–µ–Ω—å: {extra.get('level', '')}"
    except Exception:
        profile_info = student.other_inf or ""

    materials = await list_student_materials_by_name(name)
    context = "\n".join([f"- {f}" for f in materials]) if materials else "(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)"

    if language == "ru":
        prompt = f"–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name} –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {name}. "
        if profile_info:
            prompt += f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–µ–Ω–∏–∫–µ: {profile_info}. "
        prompt += f"–†–∞–Ω–µ–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n{context}\n"
        prompt += "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º—ã –ø–æ –∑–∞–Ω—è—Ç–∏—è–º –∏ —É–∫–∞–∂–∏ —Ü–µ–ª–∏ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞."
    else:
        prompt = f"Create a detailed study plan for {subject_name} for the student {name}. "
        if profile_info:
            prompt += f"Student info: {profile_info}. "
        prompt += f"Previously provided materials:\n{context}\n"
        prompt += "Outline topics by session and state the objectives for each stage."

    return await send_proxyapi_request({
        "model": MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "max_completion_tokens": 3000
    })


async def generate_assignment(student, language="ru"):
    name = student.name
    subject_name = student.subject or "–ø—Ä–µ–¥–º–µ—Ç"
    try:
        extra = json.loads(student.other_inf or "{}")
        profile_info = extra.get("profile") or f"{extra.get('goal', '')}, —É—Ä–æ–≤–µ–Ω—å: {extra.get('level', '')}"
    except Exception:
        profile_info = student.other_inf or ""

    topic = "–ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ–º—ã"

    materials = await list_student_materials_by_name(name)
    context = "\n".join([f"- {f}" for f in materials]) if materials else "(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)"

    if language == "ru":
        prompt = f"–°–æ—Å—Ç–∞–≤—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name} –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {name}. "
        if profile_info:
            prompt += f"–£—Ä–æ–≤–µ–Ω—å: {profile_info}. "
        prompt += f"–¢–µ–º–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞: {topic}. "
        prompt += f"–†–∞–Ω–µ–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n{context}\n"
        prompt += "–ó–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –≤–∫–ª—é—á–∞—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç—å –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è."
    else:
        prompt = f"Create an assignment in {subject_name} for student {name}. "
        if profile_info:
            prompt += f"Level: {profile_info}. "
        prompt += f"Last lesson topic: {topic}. "
        prompt += f"Previously provided materials:\n{context}\n"
        prompt += "Include both theoretical and practical exercises."

    return await send_proxyapi_request({
        "model": MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "max_completion_tokens": 3000
    })


async def send_proxyapi_request(json_data):
    try:
        start_time = time.time()
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(API_URL, headers=HEADERS, json=json_data)
        duration = time.time() - start_time

        print(f"üß† –û—Ç–≤–µ—Ç proxyapi –∑–∞ {duration:.2f} —Å–µ–∫: {response.status_code}")
        print(response.text)

        if response.status_code != 200:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status_code}: {response.text}"

        result = response.json()

        if "choices" in result and result["choices"]:
            return result["choices"][0]["message"]["content"].strip()
        else:
            return "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
    except httpx.ReadTimeout:
        return "‚è± –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
