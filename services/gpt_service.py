import json
import httpx
from aiogram import Bot
from config import OPENAI_API_KEY, BOT_TOKEN
from openai import AsyncOpenAI
from services.storage_service import list_student_materials_by_name

client = AsyncOpenAI(api_key=OPENAI_API_KEY)
bot = Bot(token=BOT_TOKEN)
TG_ADMIN_ID = 922135759
FOREIGN_GPT_ENDPOINT = "http://80.74.26.222/gpt"


def build_prompt_context(student, language="ru"):
    name = student.name
    subject = student.subject or ("–ø—Ä–µ–¥–º–µ—Ç" if language == "ru" else "subject")
    try:
        extra = json.loads(student.other_inf or "{}")
        profile = extra.get("profile") or f"{extra.get('goal', '')}, —É—Ä–æ–≤–µ–Ω—å: {extra.get('level', '')}"
    except Exception:
        profile = student.other_inf or ""
    return name, subject, profile


import httpx

FOREIGN_GPT_ENDPOINT = "http://80.74.26.222:8000/gpt"

async def ask_gpt(prompt: str, system_prompt: str = "", temperature=0.7):
    print("üì§ [ask_gpt] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä...")

    try:
        payload = {
            "prompt": prompt,
            "system_prompt": system_prompt,
            "temperature": temperature
        }
        print("üì¶ Payload:", payload)

        async with httpx.AsyncClient(timeout=30) as client_http:
            response = await client_http.post(FOREIGN_GPT_ENDPOINT, json=payload)
            print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")

            response.raise_for_status()
            json_data = response.json()
            print("üì• –ü–æ–ª—É—á–µ–Ω–æ JSON:", json_data)

            return json_data["content"]
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É:", repr(e))
        return "‚ö†Ô∏è GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def generate_study_plan(student, language="ru"):
    name, subject, profile = build_prompt_context(student, language)
    materials = await list_student_materials_by_name(name)
    context = "\n".join(f"- {m}" for m in materials) if materials else "(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)"
    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {name}. "
        f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–µ–Ω–∏–∫–µ: {profile}. "
        f"–†–∞–Ω–µ–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n{context}\n"
        f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º—ã –ø–æ –∑–∞–Ω—è—Ç–∏—è–º –∏ —É–∫–∞–∂–∏ —Ü–µ–ª–∏ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞."
        if language == "ru" else
        f"Create a detailed study plan for {subject} for student {name}. "
        f"Student info: {profile}. "
        f"Previously provided materials:\n{context}\n"
        f"Outline topics by session and state the objectives."
    )
    return await ask_gpt(prompt, system_prompt="You are an experienced educational methodologist.", temperature=0.7)


async def generate_assignment(student, topic=None, num_questions=5, language="ru"):
    name, subject, profile = build_prompt_context(student, language)
    topic = topic or ("–ø–æ—Å–ª–µ–¥–Ω—è—è –∏–∑—É—á–µ–Ω–Ω–∞—è —Ç–µ–º–∞" if language == "ru" else "last studied topic")
    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å {num_questions} –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ '{topic}' –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {name}. "
        f"–°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–µ–¥–∏ –∑–∞–¥–∞–Ω–∏—è, –∑–∞—Ç–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ. "
        f"–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π: {profile}."
        if language == "ru" else
        f"Create {num_questions} exercises on the topic '{topic}' for student {name}. "
        f"First list the questions, then the answers separately. "
        f"Level: {profile}."
    )
    return await ask_gpt(prompt, system_prompt="You are a helpful AI that creates educational exercises.", temperature=0.7)


async def check_answer(answer, expected, language="ru"):
    prompt = (
        f"–£—á–µ–Ω–∏–∫ –¥–∞–ª —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç: {answer}.\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {expected}.\n"
        f"–ü—Ä–æ–≤–µ—Ä—å —Ä–µ—à–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞, –æ—Ü–µ–Ω–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å, –æ–±—ä—è—Å–Ω–∏ –æ—à–∏–±–∫–∏ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
        if language == "ru" else
        f"The student answered: {answer}.\n"
        f"The correct answer is: {expected}.\n"
        f"Evaluate the response, explain any mistakes, and give advice."
    )
    return await ask_gpt(prompt, system_prompt="You are an assistant that evaluates student work.", temperature=0.5)


async def generate_report(student, language="ru"):
    name, subject, profile = build_prompt_context(student, language)
    notes = getattr(student, "progress_notes", "")
    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å —Ä–æ–¥–∏—Ç–µ–ª—è–º –æ—Ç—á—ë—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —É—á–µ–Ω–∏–∫–∞ {name} –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}. "
        f"–î–∞–Ω–Ω—ã–µ: {profile}. –ü—Ä–æ–≥—Ä–µ—Å—Å: {notes}."
        if language == "ru" else
        f"Write a report for the parents on student {name}'s performance in {subject}. "
        f"Profile: {profile}. Progress: {notes}."
    )
    return await ask_gpt(prompt, system_prompt="You are a professional education analyst.", temperature=0.6)


async def generate_homework(student, language="ru"):
    name, subject, profile = build_prompt_context(student, language)
    study_plan = student.report_student or "(—É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
    all_materials = await list_student_materials_by_name(student.name)
    last_homework = next((m for m in reversed(all_materials) if "–∑–∞–¥–∞–Ω–∏–µ" in m.lower() or "–¥–æ–º–∞—à–Ω–µ–µ" in m.lower()), None)
    last_homework_text = last_homework or "(–Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è)"
    prompt = (
        f"–ù–∞ –æ—Å–Ω–æ–≤–µ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞:\n{study_plan}\n"
        f"–ò –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:\n{last_homework_text}\n"
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {name} –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}. "
        f"–û–Ω–æ –¥–æ–ª–∂–Ω–æ –ª–æ–≥–∏—á–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–µ–º—É –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É—Ä–æ–≤–Ω—é: {profile}. "
        f"–í—ã–≤–µ–¥–∏ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è, –∑–∞—Ç–µ–º ‚Äî –æ—Ç–≤–µ—Ç—ã."
        if language == "ru" else
        f"Based on the study plan:\n{study_plan}\n"
        f"And the previous assignment:\n{last_homework_text}\n"
        f"Create a new homework assignment for student {name} in {subject}. "
        f"It should logically follow the previous topic and match the level: {profile}. "
        f"List the tasks first, then the answers."
    )
    return await ask_gpt(prompt, system_prompt="You are an educational assistant for creating homework.", temperature=0.7)
