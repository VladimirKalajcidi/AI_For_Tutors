import json
from datetime import datetime, timedelta, time, date
from sqlalchemy import select
from database.db import async_session
from database.models import Student
from database import crud

# –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ .strftime("%a") —Ñ–æ—Ä–º–∞—Ç–µ
WEEKDAYS = {"Mon","Tue","Wed","Thu","Fri","Sat","Sun"}
DEFAULT_TIME     = "15:00"
DEFAULT_DURATION = 60  # –º–∏–Ω—É—Ç

async def generate_weekly_lessons():
    async with async_session() as session:
        result = await session.execute(select(Student))
        students = result.scalars().all()

    today = date.today()
    next_week = [today + timedelta(days=i) for i in range(7)]
    default_h, default_m = map(int, DEFAULT_TIME.split(":"))

    for student in students:
        if not student.schedule_days:
            continue
        try:
            days = set(json.loads(student.schedule_days))
        except json.JSONDecodeError:
            continue

        # üõ† –Ø–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º —É—á–∏—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å student.teacher –≤–Ω–µ —Å–µ—Å—Å–∏–∏
        teacher = await crud.get_teacher_by_id(student.teacher_id)
        if not teacher:
            continue

        existing_lessons = await crud.list_upcoming_lessons_for_teacher(teacher.teacher_id)

        for day in next_week:
            if day.strftime("%a") not in days:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É—Ä–æ–∫ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            if any(
                les.students_id == student.students_id and les.data_of_lesson == day
                for les in existing_lessons
            ):
                continue

            start_dt = datetime.combine(day, time(default_h, default_m))
            end_dt = start_dt + timedelta(minutes=DEFAULT_DURATION)

            # –°–æ–∑–¥–∞—ë–º —É—Ä–æ–∫
            await crud.create_lesson(teacher, student, start_dt, end_dt)

            print(f"[AutoSchedule] –£—Ä–æ–∫ –¥–ª—è {student.name} –Ω–∞ {day.isoformat()} –≤ {DEFAULT_TIME}")
